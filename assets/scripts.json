{"libs":[{"name":"jQuery 3","src":"@extension@jquery.min.js"},{"name":"smtp","src":"https://smtpjs.com/v3/smtp.js"},{"name":"moment-min","src":"https://momentjs.com/downloads/moment-with-locales.min.js"},{"name":"bootstrap-min","src":"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"},{"name":"GoogleApi","src":"https://apis.google.com/js/api.js"}],"settings":{"badgeCounter":true,"editorConfig":{"enableBasicAutocompletion":false,"enableLiveAutocompletion":true,"enableSnippets":true,"fontSize":15,"highlightActiveLine":false,"keyboardHandler":false,"showPrintMargin":false,"tabSize":4,"theme":"ace/theme/dreamweaver","useSoftTabs":false,"useWorker":true,"wrap":true},"supportBtn":false,"themesFolder":["chrome","clouds","dawn","dracula","dreamweaver","eclipse","github","monokai","solarized_dark","solarized_light","textmate","tomorrow","tomorrow_night","twilight"],"version":8},"sites":[{"compiledCss":"#container {display: flex!important; flex-flow: row wrap!important; align-content: stretch!important; align-items: stretch!important;}.item {width: 25%!important; flex: 1 0 auto!important; margin: 10px!important;}h1 {color: rgb(255, 255, 255)!important; font-family: Raleway, sans-serif!important; font-size: 62px!important; font-weight: 800!important; line-height: 72px!important; margin: 0px 0px 24px!important; text-align: center!important; text-transform: uppercase!important;}h2 {color: rgb(17, 17, 17)!important; font-family: \"Open Sans\", sans-serif!important; font-size: 30px!important; font-weight: 300!important; line-height: 32px!important; margin: 0px 0px 72px!important; text-align: center!important;}p {color: rgb(104, 82, 6)!important; font-family: \"Helvetica Neue\", sans-serif!important; font-size: 14px!important; line-height: 24px!important; margin: 0px 0px 24px!important; text-align: justify!important;}","css":"#container {\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nalign-content: stretch;\r\nalign-items: stretch;\r\n}\r\n.item {\r\n\twidth:25%;\r\n\tflex: 1 0 auto;\r\nmargin:10px;\r\nflex-grow:1;\r\nflex-shrink:0;\r\n/*background:#999;*/\r\n}\r\nh1 { color: #ffffff; font-family: 'Raleway',sans-serif; font-size: 62px; font-weight: 800; line-height: 72px; margin: 0 0 24px; text-align: center; text-transform: uppercase; }\r\n\r\n\r\nh2 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 30px; font-weight: 300; line-height: 32px; margin: 0 0 72px; text-align: center; }\r\n\r\n\r\n\r\np { color: #685206; font-family: 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 24px; margin: 0 0 24px; text-align: justify; text-justify: inter-word; }\r\n","id":"https://publications-agora.fr/,https://paradigm.press,https://investissements.000webhostapp.com","js":"var dbg = !true;\nfunction isJqueryLoaded()\n{\n\treturn $ !== null;\n}\n\nwindow.onload = \n() => \n{\n\twhile(typeof($) === 'undefined')\n\t{\n\t\tsetInterval(isJqueryLoaded,1)\t\n\t}\n\n\tvar uri = window.location;\n\t$(\"body\").append(\"<h1>\" + new Date().toLocaleString() + \"</h1>\");\n\t$(\"body\").append(\"<input type='button' id='run' value='run!'/>\");\n\t$(\"body\").append(\"<div id='container'><div class='item' id='FR'></div><div class='item' id='US'></div></div>\");\n\t\n$(\"pre\").toggle();\n\n//For the site FR\nvar articles = JSON.parse($(\"pre\").text());\n$(articles).each((i,e)=>createArticle(\"#FR\",e));\n\n//For US site\n$.get(!dbg ? \"https://paradigm.press\"  + uri.pathname + uri.search : \"https://investissements.000webhostapp.com/wp-content/uploads/2020/posts_from_day_FR.json\").done((d) => $(d).each((i,e) => createArticle(\"#US\",e)));\n\nfunction createArticle(target,articleObj) {\nvar pArticle = $(\"<p class='article'/>\");\n$(target).append(pArticle);\npArticle.html(\"<h2>\" + articleObj.title.rendered + \"</h2>\" + \"<h3>\" + articleObj.date + \"</h3>\" + articleObj.content.rendered);\n}\n};\n\n\n","libs":["jQuery 3"],"name":"AgoradigmScript","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}},{"compiledCss":"","css":"","id":"https://wp-themes.com/twentytwenty","js":"var adminAccountUrl = 'bentaleb.youness@gmail.com';\nvar securityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\nvar timer_roll = setInterval(function() {console.log('test if rolling is allowed');RollDice(\"roll\",RollClick);},1000);\nvar timer_hide = setInterval(function() {console.log('toggle state dice randomly');$(\"#bonus_container_roll\").toggle();},randomInteger(10000));\n\nfunction RollDice(selector,callback)\n{\n\treturn;\n\tconsole.log(\"i'm fired\");\n\tif ($(\"#bonus_container_\" + selector).is(\":visible\"))\n\t{\n\t\tconsole.log(\"im visible!\");\n\t\teval(callback);\n\t\t//clearInterval(timer_roll);\n\t}\n\treturn;\n}\n\n\nfunction RollClick()\n{\n\t$(\"#bonus_container_roll\").click();\n}\n\n\nfunction randomInteger(max)\n{\n\tvar wait = Math.floor(Math.random() * max);\n\tconsole.log(wait);\n\treturn wait;\n}\n\nwindow.onload = () => {\n\n\t$(\"body\").children().remove();\n\n\t$(\"body\").append('<div class=\"row center\" id=\"reward_points_bonuses_main_div\"><div class=\"bold center\\ free_play_bonus_box_large\" id=\"bonus_container_free_points\"><p>Active bonus <span class\\=\"free_play_bonus_box_span_large\">100 extra reward points</span> ends in <span class\\=\"free_play_bonus_box_span_large\" id=\"bonus_span_free_points\">00h:00m:19s</span></p><script type=\"text\\/javascript\">$(document).ready(function() {BonusEndCountdown(\"free_points\",randomInteger(10))});</script> </div>\\\n\t\t\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\t\t<div class=\"bold center free_play_bonus_box_large\" id=\"bonus_container_free_lott\"><p>Active bonus\\ <span class=\"free_play_bonus_box_span_large\">100 extra lottery tickets</span> ends in <span class\\=\"free_play_bonus_box_span_large\" id=\"bonus_span_free_lott\">00h:00m:19s</span></p><script type=\"text\\/javascript\">$(document).ready(function() {BonusEndCountdown(\"free_lott\",randomInteger(10))});</script> </div>\\\n\t\t\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\t\t<div class=\"bold center free_play_bonus_box_large\" id=\"bonus_container_fp_bonus\"><p>Active bonus <span class\\=\"free_play_bonus_box_span_large\">1000% FREE BTC bonus</span> ends in\\\n\t\t<span class\\=\"free_play_bonus_box_span_large\" id=\"bonus_span_fp_bonus\">\\\n\t\t00h:00m:19s</span></p><script type=\"text\\/javascript\">$(document).ready(function() {BonusEndCountdown(\"fp_bonus\",randomInteger(10))});</script>\\\n\t\t</div>\\\n\t\t\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\t<button value=\"ROLL!\" id=\"bonus_container_roll\"\\\n\tclass=\"free_play_element new_button_style  profile_page_button_style\" style=\"display: none;\">\\\n\t<script type=\"text\\/javascript\">$(document).ready(function() {BonusEndCountdown(\"roll\",randomInteger(5))});</script>\\\n\t</button>\\\n\t</div>');\n\n\tconsole.log(\"i'm in\");\n\n\t$(\"#bonus_container_roll\").on(\"click\",() => console.log('im clicked!'));\n}\n\nfunction sendEmail(bonusToUpdate) {\n\tEmail.send({\n\tSecureToken : securityToken,\n\tTo : adminAccountUrl,\n\tFrom : adminAccountUrl,\n\tSubject : \"Freebitcoin bonus to updated\",\n\tBody : \"The bonus \" + bonusToUpdate + \" need to be updated.\",\n\t}).then(\n\t\tmessage => console.log(message)\n\t);\n}\n\n\nfunction BonusEndCountdown(selector, duration) {\n    var start = Date.now(), diff, hours, minutes, seconds;\n    var timer_run = setInterval(function timer() {\n        diff = duration - (((Date.now() - start) / 1000) | 0);\n        hours = (diff / (60 * 60)) | 0;\n        minutes = ((diff - (hours * 60 * 60)) / 60) | 0;\n        seconds = (diff - (minutes * 60) - (hours * 60 * 60)) | 0;\n        hours = hours < 10 ? \"0\" + hours : hours;\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n        $(\"#bonus_span_\" + selector).html(hours + 'h:' + minutes + 'm:' + seconds + 's');\n        if (timer_run !== null) {\n        if (diff <= 0) {\n            $(\"#bonus_container_\" + selector).hide();\n            FireAtInterval(\"#bonus_container_\" + selector,10000);\n            //AlertAdmin(selector);\n            clearInterval(timer_run);\n            return;\n        }\n        if (selector == 'roll') {\n        \t$(\"#bonus_container_\" + selector).show();\t\n        \tclearInterval(timer_run);\n        }\n        }\n    }, 1000);\n}\n\nfunction AlertAdmin(bonusToUpdate)\n{\n\tsendEmail(bonusToUpdate);\n}\n\n\nfunction Redeem(selector)\n{\n\tconsole.log(selector+\"is clicked\");\n}\n\n\nfunction FireAtInterval(selector,interval)\n{\n\tsetTimeout(Redeem(selector),randomInteger(interval));\n}","libs":["jQuery 3","smtp"],"name":"Alerter_DEV","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\nPour chaque instance, dynamiquement cr├®er (\"instance+chiffre incr├®ment├®\")\nil faut reouvrir la page X\ncliquer sur le bouton login \nr├®cup├®rer le compteur\nse d├®connecter\n*/\n\n/* \npassword csv col = 15 +10 pour la prochaine\nbtc address = 16\t\n*/","id":"https://freebitco.in/?op=signup_page,https://wp-themes.com/twentytwenty","js":"var urlRef = \"https://freebitco.in\";\r\n//var refParrain = \"?r=38415160\";\r\nvar user = \"compte1_65c7@caramail.com\";\r\nvar pass = \"RRLKxCK2ENzEuOj3\";\r\nvar instances = 4;\r\nvar auths = [];\r\n\r\nfunction LoadLogins() {\r\n\t\r\n\t\tif (window.debugger != null){\r\n\t    \tsessionStorage.auths = \"[]\";\r\n    \tsessionStorage.counters = '[{\"minutes\":\"53\",\"seconds\":\"28\"}]';\r\n\t\t}\r\n    const p = new Promise((resolve,reject)=>\r\n    {\r\n    \t//We need to create inspector cause we finished to get all counters\r\n    \tif (sessionStorage.auths == \"[]\") {\r\n    \t//So we clean body ;)\r\n    \tInjectCss(\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\");\r\n    \t$(\"body\").children().remove();\r\n    \t$(\"body\").attr(\"style\",\"\");\r\n    \t//and we start to create our inspector simply\r\n    \t\r\n    \t//iterate on each counter\r\n    \tfor(var i in sessionStorage.counters)\r\n    \t{\r\n    \t\tj = i+1;\r\n    \t\tvar instanceName = 'instance_'+ j;\r\n    \t\tvar counters = JSON.parse(sessionStorage.counters);\r\n    \t\tvar {minutes,seconds} = counters[i];\r\n    \t\t//var duration = +counters.shift().minutes * 60 + +counters.shift().seconds;\r\n    \t\tvar duration = moment.duration(\"00:\" + minutes + \":\" + seconds).asSeconds();\r\n    \t\t$(\"<a href='#'><span class='badge' id='\"+ instanceName + \"'></span></a>\").appendTo(\"body\");\r\n    \t\t//we create countdown for this && we display\r\n    \t\tCountDown('#' + instanceName,duration);\r\n    \t}\r\n    \t}\r\n    \t\r\n    \t// Have you some auths to test already?\r\n    \tif (sessionStorage.auths == null){\r\n        var values = sheetAsJson(\"https://spreadsheets.google.com/feeds/cells/1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg/5/public/full?alt=json\", \"password\");\r\n\t\t}\r\n\t\telse\r\n\t\t\tauths = JSON.parse(sessionStorage.auths);\r\n\t\t\r\n        window.setTimeout(function() {\r\n            // On tient la promesse !\r\n            resolve(values);\r\n        }, Math.random() * 2000 + 1000);\r\n    }\r\n    );\r\n    p.then((val)=>{\r\n        for (var j = 0; j < values.length; j++) {\r\n            var i = j + 1;\r\n            pass = values[j];\r\n            login = \"instance-\" + i + \"@gmx.fr\";\r\n            auths.push({\r\n                \"login\": login,\r\n                \"pass\": pass\r\n            });\r\n        }\r\n        return auths;\r\n    }\r\n    )\r\n    .then(()=>{\r\n    \t\t//For the first passage, we don't need wait 5min!\r\n    \t\tvar delay = auths[0].login == (\"instance-1@gmx.fr\") ? 1 : 60 * 1000;//5 * 60 * 1000;\r\n    \t\tvar {login,pass} = auths[0];//.shift();\r\n            var timeout = window.setTimeout(()=>auth(login, pass), 1);\r\n            sessionStorage.auths = JSON.stringify(auths);\r\n            //console.log(timeout);\t\r\n    }\r\n    )\r\n    .catch((err)=>console.log(\"erreur\"));\r\n\r\n}\r\n\r\nconsole.log(\"oui\");\r\nredirect();\r\n\r\nvar dbg = !true;\r\n\r\nwindow.onload = ()=>{\r\n    while (typeof ($) === 'undefined') {\r\n        setInterval(isJqueryLoaded, 1)\r\n    }\r\n\r\n    if (window.debugger != null)\r\n    {\r\n        debugger ;\r\n    }    \r\n\t        \r\n        \r\n    const Load = new Promise((resolve,reject)=>{\r\n        var auths = LoadLogins();\r\n\r\n        window.setTimeout(resolve(auths), Math.random() * 2000 + 1000);\r\n    }\r\n    )\r\n\r\n    /*\r\n\t$(\".login_menu_button\").click();\r\n\tvar timer = setInterval(function() {\r\n\t\t    if(IsHidden()) {\r\n\t\t        clearInterval(timer); \r\n\t\t        isFinished = true;\r\n\t\t        login(user,pass);\r\n\t\t    }\r\n\t\t}, 100);\r\n\t*/\r\n}\r\n\r\nfunction IsHidden() {\r\n    if ($(\"#signup_form\").is(\":hidden\"))\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nfunction auth(user, pass) {\r\n\tClearCookie();\r\n    console.log(\"Try to log in with \", user, pass);\r\n    //return {login,pass};\r\n    $(\"#login_form_btc_address\").val(user);\r\n    $(\"#login_form_password\").val(pass);\r\n    $(\"#login_button\").click();\r\n}\r\n\r\nfunction redirect() {\r\n    if (window.location.href.startsWith(\"https://wp-themes.com/twentytwenty\")) {\r\n        window.askCounter = 1;\r\n        window.location.href = urlRef;\r\n    }\r\n}\r\n","libs":["jQuery 3","moment-min","bootstrap-min"],"name":"CounterInspecteur","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"","id":"https://trader.degiro.nl/","js":"var getProperties = (i,e) => {\r\n    var item = {};\r\n    $(e).find(\"td\").each((j,t) => {        \r\n        for(var p in $(t).find(\"span\")){\r\n            console.log(p);\r\n            break;\r\n        }\r\n    }\r\n)}\r\n\r\n\r\nvar conditions = () => typeof(jQuery) === 'undefined' && $(\"div[data-name='positions'] table\").length > 0;\r\n\r\nvar dbg = !true;\r\nfunction isJqueryLoaded()\r\n{\r\n\treturn jQuery !== null;\r\n}\r\n\r\nwindow.onload = \r\n() => \r\n{\r\n\twhile(!conditions())\r\n\t{\r\n\t\tsetInterval(isJqueryLoaded,1)\t\r\n\t}\r\n\r\nconsole.log(tableToJson($(\"div[data-name='positions'] table\").get(0)));\r\n\r\n};\r\n\r\n\r\nfunction tableToJson(table) {\r\n    var data = [];\r\n\r\n    // first row needs to be headers\r\n    var headers = [];\r\n    for (var i=0; i<table.rows[0].cells.length; i++) {\r\n        headers[i] = table.rows[0].cells[i].innerHTML.toLowerCase().replace(/ /gi,'');\r\n    }\r\n\r\n    // go through cells\r\n    for (var i=1; i<table.rows.length; i++) {\r\n\r\n        var tableRow = table.rows[i];\r\n        var rowData = {};\r\n\r\n        for (var j=0; j<tableRow.cells.length; j++) {\r\n\r\n            rowData[ headers[j] ] = tableRow.cells[j].innerHTML;\r\n\r\n        }\r\n\r\n        data.push(rowData);\r\n    }       \r\n\r\n    return data;\r\n}\r\n\r\n\r\n","libs":["jQuery 3"],"name":"DegiroAsJson","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\nInSTANCE\n$(\"tr[pan-data-name]\")\n-- cocher instance nom\n$(\"tr[pan-data-name]\").eq(0).find(\"td.p6n-col-checkbox\").click()\n-- démarrage instance\n$(\".p6n-icon-start\").click()\n-- status de l'instance\n$(\"tr[pan-data-name]\").eq(2).find(\".p6n-icon-status\").attr(\"status\")\n-- Nom de l'instance\n$(\"tr[pan-data-name]\").find(\"gce-status-tooltip\").parent().find(\"a\").html()\nRécuperer toutes les instances arretes, chaque random minute\nchaque random minute, on va les démarrer.\n*/","id":"https://console.cloud.google.com/compute/instances?project=lofty-stack-290312","js":"var intervalRef = 60000;\r\nvar stoppedInstances = [];\r\nconst STOPPED = \"stopped\";\r\nconst RUNNING = \"success\";\r\nvar timersInstances = [];\r\n//var isJqueryLoaded = () =>  {return jQuery !== null;}\r\n\r\n\r\n\tconsole.log(\"oui\");\r\n/*\t\r\n    while (typeof ($) === 'undefined') {\r\n        setInterval(isJqueryLoaded, 1)\r\n    }\r\n*/\r\n \r\n    var randomInteger = (max) => \r\n\t{\r\n\t\tvar wait = Math.floor(Math.random() * max);\r\n\t\tconsole.log(wait);\r\n\t\treturn wait;\r\n\t}\r\n    \r\n    var getInstancesStopped = () => {return $(\"tr[pan-data-name]\").find(\".p6n-icon-status[status='stopped']\")};\r\n    \r\n    function getInstanceName(instance) { \r\n    \treturn $(instance).parent().parent().find(\"a\").html();\r\n    }\r\n    \r\n    var getInstanceStatus = (instance) => {\r\n    \treturn $(instance).find(\"gce-status-tooltip\").parent().find(\".p6n-icon-status\").attr(\"status\")\r\n    }\r\n    \r\n    var checkInstanceStatus = (instanceName) => {\r\n    \treturn $(\"tr[pan-data-name]\").find(\"gce-status-tooltip\").parent().find(\"a:contains('\" + instanceName +\"')\").parent().find(\".p6n-icon-status\").attr(\"status\");\r\n    }\r\n    \r\n    var startInstance = (instance) => {\r\n    \t//cocher\r\n    \t$(instance).closest(\"tr\").find(\"td.p6n-col-checkbox\").click();\r\n    \tconsole.log(\"instance\",instance,\"is checked\");\r\n    \t//start instance\r\n    \t$(\".p6n-icon-start\").click();\r\n    \tconsole.log(\"\tinstance\",instance,\"started\");\r\n    }\r\n    \r\n    var manageInstancesTimer = setInterval(() => {\r\n    \ttimersInstances = [];\r\n    \tstoppedInstances = getInstancesStopped();\r\n    \t$(stoppedInstances).each((i,e) => {\r\n    \t\tvar instanceName = getInstanceName(e);\r\n    \t\ttimersInstances[instanceName] = {\"interval\":0,\"started\":false};\r\n    \t\ttimersInstances[instanceName].interval = setInterval(() => {\r\n    \t\t\tif (typeof(!timersInstances[instanceName].started) == 'undefined' || !timersInstances[instanceName].started)\r\n    \t\t\t{\r\n    \t\t\t\tstartInstance(e);\r\n    \t\t\t\ttimersInstances[instanceName].started = true;\r\n    \t\t\t}\r\n    \t\t\tif(checkInstanceStatus(instanceName) == RUNNING)\r\n    \t\t\t{\r\n    \t\t\t\tclearInterval(timers[instanceName]);\r\n    \t\t\t}\r\n    \t\t},100);\r\n    \t})\r\n    },randomInteger(intervalRef * 2))","libs":["jQuery 3"],"name":"GCPManagement","options":{"altCSS":false,"altJS":true,"autoImportant":false,"on":true}},{"compiledCss":".instance {font-family: futura!important; font-style: italic!important; width: 100%!important; margin: 0px auto!important; text-align: center!important; color: white!important; font-size: 45px!important;}#container {display: flex!important; flex-flow: row wrap!important; align-content: stretch!important; align-items: stretch!important;}.item {width: 25%!important; flex: 1 0 auto!important; margin: 10px!important;}h1 {color: rgb(255, 255, 255)!important; font-family: Raleway, sans-serif!important; font-size: 62px!important; font-weight: 800!important; line-height: 72px!important; margin: 0px 0px 24px!important; text-align: center!important; text-transform: uppercase!important;}h2 {color: rgb(17, 17, 17)!important; font-family: \"Open Sans\", sans-serif!important; font-size: 30px!important; font-weight: 300!important; line-height: 32px!important; margin: 0px 0px 72px!important; text-align: center!important;}p {color: rgb(104, 82, 6)!important; font-family: \"Helvetica Neue\", sans-serif!important; font-size: 14px!important; line-height: 24px!important; margin: 0px 0px 24px!important; text-align: justify!important;}","css":".instance{           \r\n           font-family: futura;\r\n            font-style: italic;\r\n            width: 100%;\r\n            margin: 0 auto;\r\n            text-align: center;\r\n            color: white;\r\n            font-size: 45px;\r\n}\r\n\r\n#container {\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nalign-content: stretch;\r\nalign-items: stretch;\r\n}\r\n.item {\r\n\twidth:25%;\r\n\tflex: 1 0 auto;\r\nmargin:10px;\r\nflex-grow:1;\r\nflex-shrink:0;\r\n/*background:#999;*/\r\n}\r\nh1 { color: #ffffff; font-family: 'Raleway',sans-serif; font-size: 62px; font-weight: 800; line-height: 72px; margin: 0 0 24px; text-align: center; text-transform: uppercase; }\r\n\r\n\r\nh2 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 30px; font-weight: 300; line-height: 32px; margin: 0 0 72px; text-align: center; }\r\n\r\n\r\n\r\np { color: #685206; font-family: 'Helvetica Neue', sans-serif; font-size: 14px; line-height: 24px; margin: 0 0 24px; text-align: justify; text-justify: inter-word; }","id":"http://forgesdujabron.free.fr/","js":"var counters = {};\r\nwindow.onload = ()=> {\r\n    while (typeof ($) === 'undefined') {\r\n        setInterval(isJqueryLoaded, 1)\r\n    }\r\n\t\tInjectJs(\"https://apis.google.com/js/client.js?v=\" + new Date().getTime(),true,true,\"\",\"\");\r\n   \t   \t//So we clean body ;)\r\n    \tInjectCss(\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\");\r\n    \t$(\"body\").children().remove();\r\n    \t$(\"<div id='container'><div class='item' id='GamesCounter'></div><div class='item' id='CloudInstances'></div></div>\").appendTo('body');\r\n    \t$(\"body\").attr(\"style\",\"\");\r\n    \t//and we start to create our inspector simply\r\n    \tconsole.log(\"oui\");\r\n    \tif (typeof(window.debugger) == 'undefined') {\r\n\t    \tvar populateCounters = new Promise((resolve,reject) => \r\n\t    \t{\r\n\t    \t\tvar counters = sheetAsJson(\"https://spreadsheets.google.com/feeds/cells/1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg/5/public/full?alt=json\", \"Compteur\");\r\n\t    \t\t\r\n\t    \t\twindow.setTimeout(() => {resolve(counters);}, Math.random() * 2000 + 1000);\r\n\t    \t})\r\n\t\r\n\t\t\tpopulateCounters.then((counters) =>{\r\n\t    \t\tPopulateCounters(counters);\r\n\t\t\t})\r\n    \t}\r\n    \t\r\n    \tPopulateCloudPlatformInstance();\r\n    \t\r\n    \t/*\r\n    \tvar populateCloudPlatformInstance = new Promise((resolve,reject) => {\r\n\t\t\tPopulateCloudPlatformInstance();\r\n    \t})\r\n    \t\r\n    \tpopulateCloudPlatformInstance.then((instance) => {\r\n    \t\tFormatInstances(instances);\r\n    \t})\r\n    \t*/\r\n    \t\r\n}    \t\r\n\r\nfunction PopulateCounters(counters)\r\n{\r\n\t$(counters).each((i,e)=>\r\n    \t{\r\n    \t\tj = i;\r\n    \t\tvar instanceName = 'instance-'+ j.toString();\r\n    \t\t//var duration = +counters.shift().minutes * 60 + +counters.shift().seconds;\r\n    \t\tvar duration = moment.duration(counters[i]).asSeconds();\r\n    \t\t/*\r\n    \t\t$(\"<div class='alert alert-success' style='width:100px'><span class='badge' id='\"+ instanceName + \"'></span></div>\").appendTo(\"body\");\r\n    \t\t*/\r\n    \t\t\r\n    \t\t\r\n    \t\t$(\"<p class='instance'><a href='#'><button type='button' class='btn btn-primary'>\" + instanceName + \" <span class='badge' id='\"+ instanceName + \"'></span></button></a><br/></p>\").appendTo(\"#GamesCounter\");\r\n    \t\t\r\n    \t\t//we create countdown for this && we display\r\n    \t\tCountDown('#' + instanceName,duration);\r\n    \t})\r\n}\r\n\r\nfunction PopulateCloudPlatformInstance()\r\n{\r\n\tconsole.log(\"Function called :\",PopulateCloudPlatformInstance);\r\n\tvar isGapiLoaded = setInterval(function() {\r\n\t\t    if(typeof(gapi) != 'undefined') {\r\n\t\t        clearInterval(isGapiLoaded); \r\n\t\t\t\tgoogleComputeAuthorize(CLOUD_COMPUTE_ENGINE_API_KEY,CLOUD_COMPUTE_ENGINE_CLIENT_ID,CLOUD_COMPUTE_ENGINE_SCOPES);\r\n\t\t\t\tisGoogleClientReady = setInterval(()=>{\r\n\t\t\t\t\tif(typeof(gapi.client) != 'undefined') \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclearInterval(isGoogleClientReady);\r\n\t\t\t\t\t\tisGoogleComputeReady = setInterval(() => {\r\n\t\t\t\t\t\tif(typeof(gapi.client.compute) != 'undefined') \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tclearInterval(isGoogleComputeReady);\r\n\t\t\t\t\t\t\tgoogleComputeListInstances('lofty-stack-290312','us-central1-a',(instances) => FormatInstances(instances));\r\n\t\t\t\t\t\t}},100);\r\n\t\t\t\t\t}},100)\r\n\t\t    }},100);\r\n}\r\n\r\n\r\nfunction FormatInstances(instances)\r\n{\r\n\tconsole.log($(instances.items).each((i,e) => console.log(e.status)));\r\n}","libs":["jQuery 3","moment-min"],"name":"InstanceSummary","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"","id":"https://freebitco.in/?op=home&s","js":"class Game\n{\n\t\n\t\n\t\n}\n\nclass Counter\n{\n\tseconds = 0;\n\tminutes = 0;\n\thours = 0;\n\t\n\tgetMinutes = () => {this.minutes = $(\"#time_remaining .countdown_amount\").eq(0).text();}\n\tgetSeconds = () => {this.seconds = $(\"#time_remaining .countdown_amount\").eq(1).text();}\n\tgetCounterTime = (isRoll) => { if (isRoll) return \"00:\" + (minutes == \"\" ? \"00\" : minutes) + \":\" + (seconds  == \"\" ? \"00\" : seconds) };\n\t\n\tGetCounters()\n\t{\n\t\t$(selectors).each((i,e)=>{\n\t\t\ttimers[e] = setInterval(function() {\n\t\t\t    if(GetText(e)) {\n\t\t\t        clearInterval(timers[e]); \n\t\t\t        isFinished = true;\n\t\t\t        reverseBonusEnd(e);\n\t\t\t    }}, 100);\n\t\t});\n\t}\n\t\n}\n\nclass Settings\n{\n\tselectors = [];\n\tredeems = [];\n\t/*\n\tredeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\n\tredeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\n\t*/\n}\n\nclass User\n{\n\tbtcAdress = getBtcAddress();\n\tuserRpPoints = \"\";\n\temail = getProfileMail();\n\tbalanceBtc = getBalanceBtc();\n\tgetUserRpPointsTimer = null;\n\t\n\tgetBalanceBtc = () => $(\".balanceli\").text().substring(0,10);\n\tgetBtcAddress = () => $(\"input[name='btc_address']\").val();\n\tgetProfileMail = () => $(\"#edit_profile_form_email\").val();\t\n\t/*\n\tconst getUserRpPoints = new Promise((resolve,reject) =>\n\t{\n\t\tvar isVisible = GetText(\".user_reward_points\");\n\t\tsetTimeout(() => {if(isVisible){resolve()}else {getUserRpPoints()}},100)\n\t})\n\t\n\tgetUserRpPoints.then(() => {$(\".user_reward_points\").text()};)\n\t*/\n}\n","libs":[],"name":"Alerter_Class","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\nsi l'url contient https://freebitco.in/?op=home\nalors dans ce cas la il faut r├®cup├®rer le compteur et se d├®connecter\n*/\n\n/*\n<div id=\"time_remaining\" class=\"hasCountdown\"><span class=\"countdown_row countdown_show2\"><span class=\"countdown_section\"><span class=\"countdown_amount\">28</span><br>Minutes</span><span class=\"countdown_section\"><span class=\"countdown_amount\">52</span><br>Seconds</span></span></div>\n*/\n\n/* \ndocument.title\nsetInterval(() => console.log(document.title),1000)\n$(\"#time_remaining .countdown_amount\").eq(1).text() \n\n\n\nChaque session doit envoyer son propre compteur\nquand diff <= 0 , faire clignoter le compteur en rouge\nun click dessus nous envoie sur la page d'auth ave c le login et le mot de passe correspondant\net se connecte, on a plus qu'a roll, a la fin du roll, on envoie le compteur\n\nTODO:\n- faire un tableau bonus - points afin de d├®terminer la meilleure solution, sachant que les RP est prioritaire, vient ensuite les free btc, pour finir les lotteries\n\n- Comment d'un click sur une commande charger une vm ?\n\n*/\n\n\n","id":"https://freebitco.in/?op=compteur","js":"var seconds = \"\";\nvar minutes = \"\";\ncounters = [];\nfunction logout()\n{\n\t$(\".logout_link\").click();\n\twindow.location.href = \"https://freebitco.in/?op=signup_page\";\n}\n\n\n$(function(){\n\tconsole.log(\"oui\");\n\tvar timer = setInterval(function() {\n\t\t    if(GetText(\"#time_remaining .countdown_amount\").every((e) => e==true)) {\n\t\t        clearInterval(timer); \n\t\t        isFinished = true;\n\t\t        GetCounter();\n\t\t        sessionStorage.counters = JSON.stringify(counters);\n\t\t        \n\t\t        auths = JSON.parse(sessionStorage.auths);\n\t\t        //We kill it because already get information!\n\t\t        auths.shift()\n\t\t        sessionStorage.auths = JSON.stringify(auths);\n\t\t    }\n\t\t}, 100);\n})\n\nfunction GetCounter()\n{\n\tseconds = $(\"#time_remaining .countdown_amount\").eq(1).text();\n\tminutes = $(\"#time_remaining .countdown_amount\").eq(0).text();\n\tcounters.push({minutes,seconds});\n}\n\n\n\t\t\nfunction GetText(selector) {\n    if (window.debugger != null)\n        debugger ;\n    var result = [];\n    if ($(selector).length == 0) {\n        result.push(true);\n    }\n\n    for (var i=0;i<2;i++) {\n        if ($(selector).eq(i).text() == \"\") {\n            result.push(false);\n        } else {\n            result.push(true);\n        }\n    }\n    return result;\n}\n","libs":["jQuery 3"],"name":"Countern","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\nau demarrage, on r├®cupere tous les timers\non les analyse d├¿s qu'un est fini on fait partir un settimeout(redeem || roll ,random)\nensuite on sait qu'on a un jour pour les redeems bonus et 1h pour les rolls\n*/","id":"https://freebitco.in/?op=alerter","js":"class TimeZone\n{\n\ttimestart = null;\n\ttimeend = null;\n\t\n\tconstructor(hourInterval)\n\t{\n\t\tthis.timestart = HourAsIsoDate(hourInterval.low);\t\n\t\tthis.timeend = HourAsIsoDate(hourInterval.high);\n\t}\n\t\n\t\n\tisInInterval(hour) {return HourAsIsoDate(hour).getTime() < this.timeend.getTime() && HourAsIsoDate(hour).getTime() > this.timestart.getTime()};\n}\n\nvar config = sessionStorage.config === null ? JSON.parse(window.config) : \"\";\nvar user = null;\n/* ENVOI MAIL */ \nvar adminAccountUrl = 'bentaleb.youness@gmail.com';\nvar securityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\n/* FIN ENVOI MAIL */\nvar excludedMails = ['compte1_65c7@caramail.com'];\nvar checkedTimers = [];\nvar compteNumber = \"\";\nvar rpNeeds = [12,120,300,600,1200];\nvar profileMail = \"\";\nvar userRpPoints = \"\";\nvar redeems = [];\nredeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\nredeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\nvar nagscreenInterval,popupInterval = 0;\nvar isGapiLoaded;\nvar selectors = config != \"\" ? config.selectors : [\"fp_bonus\",\"free_points\"];\nvar process = [];\nvar intervalRef = 60000;//1mn\nvar timers = [];\nvar counters = [];\nvar counterTime = 0;\nvar forbiddenTimeZones = [];\nvar dateTimeCounterRegex = new RegExp(\"([0-9]+)h:([0-9]+)m:([0-9]+)s\");\nvar HourAsIsoDate = (hour) => { return new Date(new Date().toISOString().substring(0,11) + hour)};\nvar countdowns = [];\nvar balanceBtc = \"\";\n\n\nfunction reverseBonusEnd(selector)\n{\n\tvar intervals = dateTimeCounterRegex.exec(counters[selector]);\n\t//Get interval + add fake\n\tinterval = moment.duration(\"\" + intervals[1] + \":\" + intervals[2] + \":\" + intervals[3]).asSeconds();\n\tinterval += randomInteger(10);\n\tcountdowns[selector] = interval;\n\ttimers[selector] = setTimeout(() => Redeem(selector),interval * 1000);\n}\n\nfunction AlertAdmin(bonusToUpdate)\n{\n\tsendEmail(bonusToUpdate);\n}\n\n\nfunction GetRollCounterTime()\n{\n\tseconds = $(\"#time_remaining .countdown_amount\").eq(1).text();\n\tminutes = $(\"#time_remaining .countdown_amount\").eq(0).text();\n\treturn \"00:\" + (minutes == \"\" ? \"00\" : minutes) + \":\" + (seconds  == \"\" ? \"00\" : seconds);\n}\n\n\nfunction UpdateRollCounter()\n{\n\tcounterTime = GetRollCounterTime();\n\tconsole.log(counterTime);\n\tvar cellNumber = GetCellNumber();\n\tUpdateCsv(cellNumber,counterTime);\n\tconsole.log(\"Le compte rebours pour le compte\",compteNumber,\" update\");\n}\n\n\nfunction GetCellNumber()\n{\n\tvar profileUpdated = profileMail.replaceAll(/[a-z@.-]/g,'');\n\tif (profileUpdated == \"\")\n\t\treturn 2;\n\tcompteNumber = parseInt(profileUpdated);\n\tcompteNumber = compteNumber > 1000 ? 4 : compteNumber;\n\tvar cellNumber = +compteNumber + 2;\n\treturn cellNumber;\n}\n\n\nvar buyLotteryTickets = () => {\n\tvar accountUnblockTickets = getAccountUnblockTickets();\n\tif (accountUnblockTickets == 0)\n\t\treturn;\n\n\tvar accountUnblockTicketsAsBtc = parseFloat(accountUnblockTickets * 0.00000001);\n\n\tif (getBalanceBtc() <= accountUnblockTicketsAsBtc)\n\t\treturn;\n\t$(\"#lottery_tickets_purchase_count\").val(accountUnblockTickets);\n\t$(\"#purchase_lottery_tickets_button\").click();\n\tsetTimeout(() => window.location.reload(),10000);\n};\n\nvar getAccountUnblockTickets = () => {\n\tvar unblockSpan = $(\".account_unblock_span.option_play_multiply_span\");\n\tif (unblockSpan.length > 0)\n\t\treturn $(\".account_unblock_span.option_play_multiply_span\").html();\n\treturn 0;\t\n}\n\nvar getBalanceBtc = () => {return parseFloat($(\".balanceli\").text().substring(0,10)) };\n\nvar getBtcAddress = () => {return $(\"input[name='btc_address']\").val() };\n\nfunction UpdateCsv(cellNumber,counterTime)\n{\n\tif (excludedMails.indexOf(profileMail) == -1)\n\t{\n\t\tWriteToCsv(\"1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg\",\"'GCP Instances'!K\" + cellNumber,\"RAW\",\"FORMATTED_STRING\",counterTime);\n\t\tWriteToCsv(\"1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg\",\"'GCP Instances'!L\" + cellNumber,\"RAW\",\"FORMATTED_STRING\",getBalanceBtc());\n\t\tWriteToCsv(\"1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg\",\"'GCP Instances'!H\" + cellNumber,\"RAW\",\"FORMATTED_STRING\",getBtcAddress());\n\t\tWriteToCsv(\"1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg\",\"'GCP Instances'!M\" + cellNumber,\"RAW\",\"FORMATTED_STRING\",getAccountUnblockTickets());\n\t}\n}\n\n\nfunction Redeem(selector)\n{\n\tvar collected = FindFirstLower(redeems[selector][1],userRpPoints);\n\tif (collected == 0)\n\t\treturn;\n\tRedeemRPProduct(redeems[selector][0] + FindFirstLower(redeems[selector][1],userRpPoints) / redeems[selector][2]);\n\tconsole.log(selector +\" is redeemed\");\n}\n\nfunction FireAtInterval(selector,interval)\n{\n\tclearInterval(timers[selector]);\n\tvar duration = randomInteger(interval);\n\tconsole.log(\"Timer started for \" + selector + \":\" + duration + \"ms\" );\n\tif (selector != \"roll\"){\n\t\tvar collected = FindFirstLower(rpNeeds,userRpPoints) / 12;\n\t\tif (collected > 0)\n\t\t{\n\t\t\tsetTimeout(Redeem(\"free_points_\" + collected),duration);\n\t\t}\n\t\t\n\t\tuserRpPoints -= collected;\n\t\tcollected = FindFirstLower(rpNeeds,userRpPoints) / 12;\n\t\tif (collected > 0)\n\t\t{\n\t\t\tsetTimeout(Redeem(\"fp_bonus_\" + collected),duration);\n\t\t}\n\t\t\n\t\tuserRpPoints -= collected;\n\t\tcollected = FindFirstLower(rpNeeds,userRpPoints) / 12;\n\t\tif (collected > 0)\n\t\t{\n\t\t\tsetTimeout(Redeem(\"free_lott_\" + collected),duration);\n\t\t}\t\t\n\t}\n\telse {\n\t\tif ($(\"#play_without_captchas_button\").length == 0)\n\t\t\tsetTimeout(RollClick(),duration);\n\t}\n}\n\n\n\nfunction isJqueryLoaded()\n{\n\treturn $ !== null;\n}\n\nwindow.onload = () => \n{\n\twhile(typeof($) === 'undefined')\n\t{\n\t\tsetInterval(isJqueryLoaded,1)\t\n\t}\n\t\n\tforbiddenTimeZones.push(new TimeZone({\"low\":\"01:00:00\",\"high\":\"05:00:00\"}));\t\n\t\n\t$(forbiddenTimeZones).each((i,e) => {\n\t\tif (e.isInInterval(moment(new Date(),\"hh:mm:ss\")))\t{\n\t\t\tInitialize();\n\t\t\treturn false;\n\t\t}\n\t});\n\t\n\tInitialize();\n\n\tInjectJs(\"https://apis.google.com/js/api.js?v=\" + new Date().getTime(),true,true,\"\",\"\");\n    isGapiLoaded = setInterval(function() {\n\t\t    if(typeof(gapi) != 'undefined') {\n\t\t        clearInterval(isGapiLoaded); \n\t\t        handleGapiLoad('client:auth2',initClient);\n\t\t        var signInGapiTimer = setInterval(function() {\n\t\t    \tif(typeof(gapi.client) != 'undefined') {\n\t\t        clearInterval(signInGapiTimer); \n\t\t        handleSignInClick();\n\t\t    var getRollCounterTimer = setInterval(function() {\n\t\t    if(hasSignIn()) {\n\t\t\t    clearInterval(getRollCounterTimer); \n\t\t\t    isFinished = true;\n\t\t       \tvar getProfileMailTimer = setInterval(function() {\n\t\t       \t\tif(GetText(\"#edit_profile_form_email\"))\n\t\t       \t\t{\n\t\t\t\t\t\tclearInterval(getProfileMailTimer);\n\t\t\t\t\t\tprofileMail = $(\"#edit_profile_form_email\").val();\t\t\t\t\n\t\t\t\t\t\tUpdateRollCounter();\n\t\t\t\t\t\tTriggerOnRoll();\n\t\t\t\t\t} \n\t\t\t\t});\n\t\t    }}, 100);\n\t\t    }}, 100);\t\n\t\t    }}, 100);\n\n\tGetCounters();\n\n\tvar getUserRpPointsTimer = setInterval(() => {\n\t\tif(GetText(\".user_reward_points\"))\n\t\t{\n\t\t\tclearInterval(getUserRpPointsTimer);\n\t\t\tuserRpPoints = $(\".user_reward_points\").text();\n\t\t}},100);\n}\n\n\nfunction TriggerOnRoll()\n{\n\t$(\"#free_play_form_button\").on(\"click\",function(){\n\t\t\tvar triggerOnRollTimer = setInterval(() => {\n\t\t    if(hasSignIn()) {\n\t\t\t    clearInterval(triggerOnRollTimer);\n\t\t\t\tvar c = GetRollCounterTime();\n\t\t\t\tvar cellNumber = GetCellNumber();\n\t\t\t\tif (cellNumber != 'NaN')\n\t\t\t\t\tUpdateCsv(cellNumber,c);\n\t\t\t}}, 100);\n\t});\n}\n\n\nfunction GetCounters()\n{\n\t$(selectors).each((i,e)=>{\n\t\ttimers[e] = setInterval(function() {\n\t\t    if(GetText(e)) {\n\t\t        clearInterval(timers[e]); \n\t\t        isFinished = true;\n\t\t        reverseBonusEnd(e);\n\t\t    }}, 100);\n\t});\n}\n\nfunction GetText1(selector) \n{\n    var result = [];\n    if ($(selector).length == 0) {\n        result.push(true);\n    }\n\n    for (var i=0;i<2;i++) {\n        if ($(selector).eq(i).text() == \"\") {\n            result.push(false);\n        } else {\n            result.push(true);\n        }\n    }\n    return result;\n}\n\nfunction GetText(item)\n{\n\t\tvar selector = \"#bonus_span_\"+ item;\n\t\t\n\t\tif ($(selector).length == 0){\n\t\t\tcounters[item] = \"00h:00m:00s\";\n\t\t\treturn true;\n\t\t}\n\t\tif($(selector).text() == \"\")\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcounters[item] = $(selector).text();\n\t\t\treturn true;\n\t\t}\n\t\t\n}\n\nfunction Initialize()\n{\n\tvar buyLotteryTicketsTimer = setInterval(() => buyLotteryTickets(),1000 * 60 * 15);\n\t\n\ttimers[\"roll\"] = {\"interval\":setTimeout(() => CheckVisibility(\"roll\",() => FireAtInterval(\"roll\",intervalRef)),1000),\"created\": new Date().toLocaleTimeString()};\n}\n\nfunction CheckVisibility(selector,callback)\n{\n\tcheckedTimers[selector] = \"Check visibility for \" + selector + \" fired at \" + new Date().toLocaleTimeString();\n\t\n\tvar localSelector = selector == \"roll\" ? \"#free_play_form_button\" : \"#bonus_container_\" + selector;\n\t\n\tvar stateChecked = selector == \"roll\" ? \":visible\" : \":hidden\";\n\t\n\tvar result = $(localSelector).is(stateChecked);\n\t\n\tif(result) {\n\t\tif (typeof(callback) != 'undefined')\t\n\t\t\tcallback();\n\t\telse\n\t\t\treturn result;\n\t}\n}\n\nfunction testNagScreen()\n{\n\tvar isNagScreenVisible = setInterval(()=> {\n\t\tif($(\".reveal-modal\").is(\":visible\")){\n\t\t\tclearInterval(isNagScreenVisible);\n\t\t\tUpdateCsv(cellNumber,GetRollCounterTime());\n\t\t\twindow.location.reload();\n\t\t}\n\t})\n\t\n\t/*\n\tvar isNagScreenVisible = new Promise((resolve,reject) => {\n\t\tCheckVisibility(\".reveal-modal\") == true;\n\t\t\n\t\tsetTimeout(() => resolve(),2000);\n\t\t\n\t})\n\tisNagScreenVisible.then(() => {console.log(\"popup visible\");UpdateCsv(cellNumber,GetRollCounterTime())}).catch(\n      () =>  { \n        console.log(\"promesse rompue\");\n      });\n\t*/      \n}\n\nfunction RollClick()\n{\n\tbuyLotteryTickets();\n\twindow.location.reload();\n\t$(\"#free_play_form_button\").click();\n\tclearInterval(timers[\"roll\"]);\n\t//TryToHide(\".reveal-modal\");\n\t//TryToHide(\".reveal-modal-bg\");\n\tuserRpPoints = $(\".user_reward_points\").text();\n\ttimers[\"roll\"] = {\"interval\":setInterval(() => CheckVisibility(\"roll\",() => FireAtInterval(\"roll\",intervalRef)),1000),\"created\": new Date().toLocaleTimeString()};\n}\n\nfunction randomInteger(max)\n{\n\tvar wait = Math.floor(Math.random() * max);\n\tconsole.log(wait);\n\treturn wait;\n}\n\nfunction sendEmail(bonusToUpdate) \n{\n\tEmail.send({\n\tSecureToken : securityToken,\n\tTo : adminAccountUrl,\n\tFrom : adminAccountUrl,\n\tSubject : \"Freebitcoin bonus to updated\",\n\tBody : \"The bonus \" + bonusToUpdate + \" need to be updated.\",\n\t}).then(\n\t\tmessage => console.log(message)\n\t);\n}","libs":["jQuery 3","smtp","moment-min"],"name":"Alerter","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\nhttps://www.instagram.com/graphql/query/?query_hash=d04b0a864b4b54837c0d870b0e77e076&variables=%7B%22id%22%3A%2234364498711%22%2C%22include_reel%22%3Atrue%2C%22fetch_mutual%22%3Afalse%2C%22first%22%3A24%7D\n*/","id":"https://www.instagram.com/","js":"","libs":[],"name":"IGClean","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}},{"compiledCss":"","css":"","id":"*//nbhcbdghjpllgmfilhnhkllmkecfmpld/options.html","js":"console.log('test');","libs":[],"name":"test","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}},{"compiledCss":".blinking {animation: 1s ease 0s infinite normal none running blinkingText!important; background-color: rgb(252, 3, 11)!important;}@keyframes blinkingText { \n  0% { opacity: 0; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}","css":"    /* Set the size, colour, font properties for the blinking text */\r\n        .blinking {\r\n            animation: blinkingText 1s infinite;\r\n            background-color: #fc030b;\r\n        }\r\n        \r\n        /* Specifies the animation and transparency for the blinking text */\r\n        @keyframes blinkingText {\r\n   \r\n            0% {\r\n                opacity: 0;\r\n            }\r\n            50% {\r\n                opacity: .5;\r\n            }\r\n            100% {\r\n                opacity: 1;\r\n            }\r\n        }\r\n","id":"https://freebitco.*","js":"var auths = [];\nvar values = [];\n\nvar CLOUD_COMPUTE_API_VERSION = 'v1';\nvar CLOUD_COMPUTE_ENGINE_API_KEY = \"QUl6YVN5RGVuNDR4OWZKLWxEd0xEWHV4VUxDeFJHQW1tckl1OUdv\";\nvar CLOUD_COMPUTE_ENGINE_CLIENT_ID = '930935452270-r735mpq32d3fkli1lu7s0cn9m31dt1r1.apps.googleusercontent.com';\nvar CLOUD_COMPUTE_ENGINE_SCOPES = 'https://www.googleapis.com/auth/compute';\n//https://www.googleapis.com/auth/cloud-platform'];\n\nvar GOOGLE_SHEET_ID = \"1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg\";\nvar GOOGLE_SHEETS_API_KEY = \"AIzaSyB6cpl9KtwStLc8bFZGyEHryBg5XY6PX50\";\nvar GOOGLE_SHEETS_CLIENT_ID = '659142072690-co0fa66mn7mfsrba0msser9djfu9bfjb.apps.googleusercontent.com';\nvar GOOGLE_SHEETS_SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];\n\n\n\n\nfunction getCookieValue(value){\nvar cookieSplitted = $(document.cookie.replace(' ','').split(\";\"));\nvar valuesSplitted = [];\n$(cookieSplitted).each((i,e) => valuesSplitted.push(e.split(\"=\")));\nvar token = \"not found\" ; \nfor(var i in valuesSplitted){\n\tif (valuesSplitted[i][0] == value) {\n\t\ttoken = valuesSplitted[i][1];break;\n\t\t}\n\t\tcontinue;\n\t\n}\nreturn token\n}\n\nfunction isSelectorReady(selector)\n{\n\treturn $(selector).length != 0;\n}\n\nfunction isSelectorFilled(selector)\n{\n\tif(!isSelectorReady(selector))\n\t\treturn false;\n\treturn $(selector).text() != \"\" || $(selector).val() != \"\";\t\t\n}\n\n\nfunction isSelectorVisible(selector)\n{\n\tif (!isSelectorReady(selector))\n\t\treturn false;\n\treturn $(selector).is(\":visible\");\n}\n\nfunction sendEmail(securityToken,to,from,subject,body) \n{\n\tEmail.send({\n\tSecureToken : securityToken,\n\tTo : to,\n\tFrom : from,\n\tSubject : subject,\n\tBody : body,\n\t}).then(\n\t\tmessage => console.log(message)\n\t);\n}\n\n\n\nfunction isJqueryLoaded() {\n\tconsole.log(\"Utils:\",\"isJqueryLoaded\",\"called\");\n    return jQuery !== null;\n}\n\nfunction InjectJs(src,isAsync,isDefer,onLoadCallBack,onReadyStateChangeCallBack)\n{\n\tif (window.debugger)\n\t\tdebugger;\n\tvar script = $(\"<script \" +  isAsync ? 'async ' : '' + isDefer ? 'defer ' : '' + '/>');\n\tscript.attr(\"src\",src);\n\tscript.attr(\"onload\",onLoadCallBack);\n\tscript.attr(\"onreadystatechange\",onReadyStateChangeCallBack);\n/*\n\tvar script = '<script ';\n\tscript += isAsync ? 'async ' : '';\n\tscript += isDefer ? 'defer ' : '';\n*/\t\n\t$(\"body\").append(script);\n}\n\n\nfunction randomInteger(max)\n{\n\tvar wait = Math.floor(Math.random() * max);\n\tconsole.log(wait);\n\treturn wait;\n}\n\n\nfunction FindFirstLower(arr,item)\n{\n\tif(/,|\\./.test(item)) item = item.replace(/,|\\./,'');\n\tvar lowerValue = 0;\n\tif(parseInt(item) > parseInt(arr[arr.length-1])) return arr[arr.length-1];\n\tfor(var i in arr)\n\t{\n\t\tif (arr[i] <= item){\n\t\t\tlowerValue = arr[i];\n\t\t\t//break;\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn lowerValue;\n}\n\n\nfunction sheetAsJson(url,columnName,callback){\n\t\n$.getJSON(\"https://spreadsheets.google.com/feeds/cells/1BvbccqgHuG6-XJ9KIJIoD_sE9gAKA9iZ3XXonvd1VCg/5/public/full?alt=json\")\n\t.done((data) => {\n\t\tvar entries = data.feed.entry;\n\t\tvar passColumn = entries.find((e) => e.content.$t == columnName);\n\t\tvar passColumnId = parseInt(passColumn.gs$cell.col);\n\t\tvar rowWanted = 1;\n\t\tvar colWanted = entries.find((e,i) => i > 0 && e.gs$cell.row == rowWanted \n\t\t\t&& e.gs$cell.inputValue == columnName).gs$cell.col;\n\t\trowWanted++;\n\t\tfor(var i = 0;i< entries.length-1;i++)\n\t\t{\n\t\t\tvar entry = entries.find((e,i) => e.gs$cell.row == rowWanted \n\t\t\t&& e.gs$cell.col == colWanted);\n\t\t\tif(typeof(entry) != \"undefined\")\n\t\t\t\tvalues.push(entry.content.$t);\n\t\t\trowWanted++;\t\t\t\t\n\t\t}\n\t})\n\treturn values;\n}\n\nfunction CountDown(selector, duration) {\n    var start = Date.now(), diff, hours, minutes, seconds;\n    var timer_run = setInterval(function timer() {\n        diff = duration - (((Date.now() - start) / 1000) | 0);\n        hours = (diff / (60 * 60)) | 0;\n        minutes = ((diff - (hours * 60 * 60)) / 60) | 0;\n        seconds = (diff - (minutes * 60) - (hours * 60 * 60)) | 0;\n        hours = hours < 10 ? \"0\" + hours : hours;\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n        $(selector).html(hours + 'h:' + minutes + 'm:' + seconds + 's');\n        if (timer_run !== null) {\n        if (diff <= 0) {\n        \t$(selector).parent().addClass(\"blinking\");\n            clearInterval(timer_run);\n            return;\n        }\n        else\n        \t$(selector).parent().hide();\n        }\n    }, 1000);\n}\n\nfunction InjectCss(link)\n{\n\t$(\"head\").append('<link rel=\"stylesheet\" href=\"' + link + '\">');\n}\n\nfunction InjectJs(src,isAsync,isDefer,onLoadCallBack,onReadyStateChangeCallBack)\n{\n\tvar script = $('<script>', {\n    type: 'text/javascript',\n    src: src\n\t});\n\t\n\tif (isAsync)\n\t\tscript[0].setAttribute(\"async\", \"\");\t\t\n\n\tif (isDefer)\n\t\tscript[0].setAttribute(\"async\", \"\");\t\t\n\t\t\n\tscript[0].setAttribute(\"onload\",onLoadCallBack);\n\tscript[0].setAttribute(\"onreadystatechange\",onReadyStateChangeCallBack);\n\t$('body').before(script);\n}\n\nfunction HideSelector(selector)\n{\n\tif ($(selector).length > 0)\n\tdo{\n\t\t($(selector).is(\":visible\"))\n\t}while($(selector).is(\"hidden\"));\n}\n\n\nfunction ClearCookie(){\nvar cookie = document.cookie.split(';');\n\nfor (var i = 0; i < cookie.length; i++) {\n\n    var chip = cookie[i],\n        entry = chip.split(\"=\"),\n        name = entry[0];\n\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}\n}\n\n\n/* GOOGLE API */\n\n\t/* Google Cloud Platform */ \n\n\n\nfunction googleComputeAuthorize(apiKey,clientId,scopes) {\n       gapi.client.setApiKey(apiKey);\n       gapi.auth.authorize({\n         client_id: clientId,\n         scope: scopes,\n         immediate: false\n       }, function(authResult) {\n            if (authResult && !authResult.error) {\n              handleClientLoad();\n            } else {\n              window.alert('Auth was not successful');\n            }\n          }\n       );\n     }\n \n \n \n \nfunction googleComputeListInstances(project,zone,callback) {\n  var request = gapi.client.compute.instances.list({\n    'project': project,\n    'zone': zone\n  });\n  request.execute(function(resp) {\n    callback(resp);\n  });\n}\n\n\t/* Google Sheets Api */ \nfunction WriteToCsv(spreadsheetId,range,valueInputOption,responseDateTimeRenderOption,values)\n{\n\tvar values = [\n\t  [\n\t    values\n\t  ],\n\t  // Additional rows ...\n\t];\n\tvar body = {\n\t  values: values\n\t};\n\t\n\tvar params = {\n\t   spreadsheetId: spreadsheetId,\n\t   range: range,\n\t   valueInputOption: valueInputOption,\n\t   responseDateTimeRenderOption: responseDateTimeRenderOption,\n\t   resource: body\n\t};\n\t\n\tvar writeToCsvTimer = setInterval(() => {\n\tif (typeof(gapi.client.sheets) != 'undefined') {\n\t\tclearInterval(writeToCsvTimer);\n\t\tgapi.client.sheets.spreadsheets.values.update(params).then((response) => {\n\t\t  var result = response.result;\n\t\t  console.log(`${result.updatedCells} cells updated.`);\n\t\t});\n\t}},100);\n}\n\nfunction ReadCsv(spreadsheetId,range,valueRenderOption,dateTimeRenderOption)\n{\n\tvar params = {\n\t\tspreadsheetId: spreadsheetId,\n\t\trange: range,\n\t\tvalueRenderOption: valueInputOption,\n\t\tdateTimeRenderOption: dateTimeRenderOption\n\t};\n\n\tvar readCsvTimer = setInterval(() => {\n\tif (typeof(gapi.client.sheets) != 'undefined') {\n\t\tgapi.client.sheets.spreadsheets.values.get(params).then((response) => {\n        // TODO: Change code below to process the `response` object:\n        console.log(response.result);\n    \t}, function(reason) {\n        \tconsole.error('error: ' + reason.result.error.message);\n    \t});\n\t}},100);\n}\n\nfunction initClient(apiKey,clientId,scope,callback) {\n      var API_KEY = typeof(apiKey) != \"undefined\" ? apiKey : GOOGLE_SHEETS_API_KEY;  // TODO: Update placeholder with desired API key.\n\n      var CLIENT_ID = typeof(clientId) != \"undefined\" ? clientId : '659142072690-co0fa66mn7mfsrba0msser9djfu9bfjb.apps.googleusercontent.com';  // TODO: Update placeholder with desired client ID.\n\n      // TODO: Authorize using one of the following scopes:\n      //   'https://www.googleapis.com/auth/drive'\n      //   'https://www.googleapis.com/auth/drive.file'\n      //   'https://www.googleapis.com/auth/spreadsheets'\n      var SCOPE = typeof(scope) != \"undefined\" != \"\" ? scope : 'https://www.googleapis.com/auth/spreadsheets';\n\n      gapi.client.init({\n        'apiKey': API_KEY,\n        'clientId': CLIENT_ID,\n        'scope': SCOPE,\n        'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n      })\n      .then(function(client) {\n        typeof(callback) != \"undefined\" ? callback(client) : googleSheetUpdateSignInStatus();\n      });\n}\n\n\nfunction googleSheetUpdateSignInStatus()\n {\n \tgapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);\n    updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n }\n\nfunction handleGapiLoad(authAsked,callback) {\n  gapi.load(authAsked, callback);\n}\n\nfunction handleClientLoad() {\n  gapi.client.load('compute', CLOUD_COMPUTE_API_VERSION);;\n}\n\nfunction updateSignInStatus(isSignedIn) {\n  if (isSignedIn) {\n  \t\n  }\n}\n\nfunction hasSignIn()\n{\n\treturn gapi.auth2.getAuthInstance().isSignedIn.get();\n}\n\nfunction handleSignInClick(event) {\n  gapi.auth2.getAuthInstance().signIn();\n}\n\nfunction handleSignOutClick(event) {\n  gapi.auth2.getAuthInstance().signOut();\n}\n","libs":["moment-min","GoogleApi"],"name":"Utils","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}},{"compiledCss":"","css":"/*\r\nvar config = sessionStorage.config === null ? JSON.parse(window.config) : \"\";\r\nvar user = null;\r\n\r\nvar adminAccountUrl = 'bentaleb.youness@gmail.com';\r\nvar securityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\r\n\r\nvar excludedMails = ['compte1_65c7@caramail.com'];\r\nvar checkedTimers = [];\r\nvar compteNumber = \"\";\r\nvar rpNeeds = [12,120,300,600,1200];\r\nvar profileMail = \"\";\r\nvar userRpPoints = \"\";\r\nvar redeems = [];\r\nredeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\r\nredeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\r\nvar nagscreenInterval,popupInterval = 0;\r\nvar isGapiLoaded;\r\nvar selectors = config != \"\" ? config.selectors : [\"fp_bonus\",\"free_points\"];\r\nvar process = [];\r\nvar intervalRef = 60000;//1mn\r\nvar timers = [];\r\nvar counters = [];\r\nvar counterTime = 0;\r\nvar forbiddenTimeZones = [];\r\nvar dateTimeCounterRegex = new RegExp(\"([0-9]+)h:([0-9]+)m:([0-9]+)s\");\r\nvar HourAsIsoDate = (hour) => { return new Date(new Date().toISOString().substring(0,11) + hour)};\r\nvar countdowns = [];\r\nvar balanceBtc = \"\";\r\n*/","id":"https://freebitco.in/?op=home","js":"class TimeZone\r\n{\r\n\ttimestart = null;\r\n\ttimeend = null;\r\n\t\r\n\tconstructor(hourInterval)\r\n\t{\r\n\t\tthis.timestart = HourAsIsoDate(hourInterval.low);\t\r\n\t\tthis.timeend = HourAsIsoDate(hourInterval.high);\r\n\t}\r\n\t\r\n\t\r\n\tisInInterval(hour) {return HourAsIsoDate(hour).getTime() < this.timeend.getTime() && HourAsIsoDate(hour).getTime() > this.timestart.getTime()};\r\n}\r\n\r\n\r\nclass Storage\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tconsole.log(\"sotrage loaded!\");\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass TimeSpan\r\n{\r\n\tseconds = 0;\r\n\tminutes = 0;\r\n\thours = 0;\r\n\t\r\n\tconstructor(seconds,minutes,hours)\r\n\t{\r\n\t\tthis.seconds = seconds;\r\n\t\tthis.minutes = minutes;\r\n\t\tthis.hours = hours;\r\n\t}\r\n}\r\nclass User\r\n{\r\n\temail = \"\";\r\n\trewardPoints = 0;\r\n\tbtcBalance = 0.0;\r\n\tbtcAddress = \"\";\r\n\tfieldLocationRow = 0;\r\n\tblockingTickets = 0;\r\n\tblockingTimer = 0;\r\n\tbonusActives = [];\r\n\toldBlockingTickets = 0;\r\n\toldBtcBalance = 0;\r\n\toldRewardPoints = 0;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.bonusActives = this.getActiveBonus();\r\n\t\tthis.email = this.getProfileMail();\r\n\t\tthis.btcBalance = this.getBtcBalance();\r\n\t\t\r\n\t\tif (this.btcBalance <= 0.00000004)\r\n\t\t\tif (!$(\"#disable_lottery_checkbox\").is(\":checked\"))\r\n\t\t\t\t$(\"#disable_lottery_checkbox\").click();\r\n\t\t\r\n\t\tthis.btcAddress = this.getBtcAddress();\r\n\t\tthis.fieldLocationRow = this.email == settings.adminAccountUrl ? 2 : this.getCellNumber();\r\n\t\tthis.fieldLocationRow = settings.excludedMails.indexOf(this.email) > -1 ? 102 : this.fieldLocationRow;\r\n\t\tthis.rewardPoints = this.getRpPoints();\r\n\t\t\r\n\t\tthis.blockingTimer = setInterval(() => {\r\n\t\t\tif(isSelectorReady(\".account_unblock_span.option_play_multiply_span\"))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(this.blockingTimer);\r\n\t\t\t\tthis.blockingTickets = this.getAccountUnblockTickets();\r\n\t\t\t}\r\n\t\t},1000);\r\n\t\t\r\n\t\t//init old values\r\n\t\tthis.oldRewardPoints = this.rewardPoints;\r\n\t\tthis.oldBtcBalance = this.btcBalance;\r\n\t\tthis.oldBlockingTickets = this.blockingTickets;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tgetActiveBonus(){\r\n\t\tvar activeBonus = $(\"#reward_points_bonuses_main_div\").find(\".free_play_bonus_box_span_large:nth-child(1)\");\r\n\t\tlet bonusActivated = [{'lottery':''}];\r\n\t\t//Some active bonus\r\n\t\tif (activeBonus.length > 0)\r\n\t\t{\r\n\t\t\t$(activeBonus).each((i,e) => {\r\n\t\t\t\tvar id = $(e).closest(\"div\").attr(\"id\").replace(\"bonus_container_\",\"\");\r\n\t\t\t\tvar multiplicateur = settings.redeems[id][2];\r\n\t\t\t\tvar item = $(e).text().replace(/[ _$&%a-zA-Z.+-]/g,'');\r\n\t\t\t\tvar amountActive = parseInt(item);\r\n\t\t\t\tif (!isNaN(amountActive))\r\n\t\t\t\t{\r\n\t\t\t\t\tbonusActivated[id] = amountActive * multiplicateur;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn bonusActivated;\r\n\t}\r\n\t\r\n\tgetBtcBalance() {\r\n\t\treturn parseFloat($(\".balanceli\").text().substring(0,10)) \r\n\t};\r\n\r\n\tgetBtcAddress() {return $(\"input[name='btc_address']\").val() };\r\n\t\r\n\tgetProfileMail() { return $(\"#edit_profile_form_email\").val()};\r\n\t\r\n\tgetRpPoints() { \r\n\t\t return $(\".user_reward_points\").text();\r\n\t}\r\n\tgetCellNumber() {\r\n\t\tlet compteNumber = parseInt(this.email.split('@')[0].replaceAll(/[_a-z@\\.-]/g,''));\r\n\t\tcompteNumber = compteNumber > 1000 ? 4 : compteNumber;\r\n\t\treturn +compteNumber + 2;\r\n\t}\r\n\t\r\n\tgetAccountUnblockTickets() {\r\n\t\tlet accountUnblockTickets =  parseInt($(\".account_unblock_span.option_play_multiply_span\").html());\r\n\t\tif (isNaN(accountUnblockTickets))\r\n\t\t\treturn 0;\r\n\t\treturn accountUnblockTickets;\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\nclass Settings\r\n{\r\n\tselectors = [];\r\n\tredeems = [];\r\n\tadminAccountUrl = 'bentaleb.youness@gmail.com';\r\n\tsecurityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\r\n\texcludedMails = ['compte1_65c7@caramail.com'];\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.selectors = [\"fp_bonus\",\"free_points\"];\r\n\t\tthis.redeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\r\n\t\tthis.redeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\r\n\t}\r\n}\r\nclass Game\r\n{\r\n\troll;\r\n\tlottery;\r\n\tbonus = [];\r\n\tcounters =  [];\r\n\ttimers = []\r\n\tconstructor(){\r\n\t\tthis.roll = new Roll();\r\n\t\t$(settings.selectors).each((i,e)=>{\r\n\t\t\tthis.bonus.push(new Bonus(e));\r\n\t\t});\r\n\t\tthis.lottery = new Lottery();\r\n\t\tthis.ticks();\r\n\t}\r\n\t\r\n\tclearIntervals()\r\n\t{\r\n\t\tthis.timers.map(t => clearInterval(t));\r\n\t}\r\n\t\r\n\tticks()\r\n\t{\r\n\t\tthis.timers[\"roll\"] = setTimeout(() => {this.roll.redeem()},this.roll.counter.asSeconds() * 1000 + this.roll.counter.randomWaiting);\r\n\t\t/*\r\n\t\tthis.timers[\"lottery\"] = setInterval(() =>{ if (user.getAccountUnblockTickets() > 0) this.lottery.redeem()},1000 * 60 * 15 );\r\n\t\t*/\r\n\t\t\r\n\t\t/*\r\n\t\t$(this.bonus).each((i,b) => this.timers[b.selector] = setInterval(() => b.redeem(b.selector) ,\r\n\t\tb.counter.asSeconds() * 1000)  + b.counter.randomWaiting )\r\n\t\t*/\r\n\t}\r\n\t\r\n\t\r\n\tgameTester(callback)\r\n\t{\t\t\r\n\t\t//$(\"#gameTester\").on(\"click\",() => \r\n\t\tcallback();\r\n\t}\r\n\t\r\n}\r\nclass Counter\r\n{\r\n\tseconds = 0;\r\n\tminutes = 0;\r\n\thours = 0;\r\n\tselector = \"\";\r\n\ttimeRemaining = \"\";\r\n\tconstructor(selector)\r\n\t{\r\n\t\tthis.selector = selector;\r\n\t}\r\n\r\n\ttoString(){return this.hours + \":\" + (this.minutes == \"\" ? \"00\" : this.minutes) + \":\" + (this.seconds  == \"\" ? \"00\" : this.seconds);}\r\n\t\r\n\tasSeconds(){return moment.duration(this.toString()).asSeconds()};\r\n\t\r\n\t\r\n\tcountDown(){\r\n\t\tconsole.log(\"countdown called\");\r\n\t\t//CountDown(this.selector,this.asSeconds());\r\n\t}\r\n\t\r\n}\r\nclass RollCounter extends Counter\r\n{\r\n\trandomWaiting;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"roll\");\r\n\t\tthis.hours = \"00\";\r\n\t\tthis.randomWaiting = randomInteger(60000);\r\n\t\tsetInterval(() => {this.getTimer();},1000);\r\n\t}\r\n\t\r\n\t\r\n\tgetTimer()\r\n\t{\r\n\t\tthis.seconds = this.getSeconds();\r\n\t\tthis.minutes = this.getMinutes();\r\n\t\tthis.timeRemaining = this.toString();\r\n\t}\r\n\t\r\n\t\r\n\tgetSeconds() {return $(\"#time_remaining .countdown_amount\").eq(1).text();}\r\n\tgetMinutes(){return $(\"#time_remaining .countdown_amount\").eq(0).text();}\r\n\tgetHours(){}\r\n}\r\nclass BonusCounter extends Counter\r\n{\r\n\trandomWaiting;\r\n\ttimer = 0;\r\n\tduration;\r\n\tjQuerySelector = \"\";\r\n\tconstructor(selector)\r\n\t{\r\n\t\tsuper(selector);\r\n\t\tthis.jQuerySelector = \"#bonus_span_\" + this.selector;\r\n\t\tthis.randomWaiting = randomInteger(60000);\r\n\t\tconsole.log(\"class\",selector,\"created\");\r\n\t\tthis.duration = new TimeSpan();\r\n\t\tsetInterval(() => {this.timer = this.getBonusTimer(this.jQuerySelector)}, 1000);\r\n\t}\r\n\t\r\n\tgetBonusTimer(selector) {\r\n\t\t    if(isSelectorFilled(selector)) {\r\n\t\t        clearInterval(this.timer);\r\n\t\t        this.timeRemaining = $(selector).text().replace(/[a-zA-Z]/g,'');\r\n\t\t        [this.duration.hours, this.duration.minutes,this.duration.seconds] = this.timeRemaining.split(\":\");\r\n\t\t    }\r\n\t}\r\n\r\n\tgetHours(){ return this.hours; }\r\n\tgetMinutes(){ return this.minutes; }\r\n\tgetSeconds(){ return this.seconds; }\r\n}\r\n\r\n\r\nclass Roll\r\n{\r\n\trandomWaiting;\r\n\tcounter;\r\n\tselector;\r\n\tjQuerySelector;\r\n\twaitBeforeChangePageTimer;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.selector = \"roll\";\r\n\t\tthis.jQuerySelector = \"\";\r\n\t\tthis.counter = new RollCounter();\r\n\t\tsetInterval(() => {console.log(\"Update toutes les MINUTES\");persistance.Update(this,true)},1000 * 60 * 1);\r\n\t}\r\n\t\r\n\tredeem()\r\n\t{\r\n\t\t//console.log(\"roll ask to be redeemed in\",this.counter.asSeconds());\r\n\t\tif (!isSelectorReady(\"#free_play_form_button\")) return;\r\n\t\tif (this.counter.asSeconds() == 0)\r\n\t\t{\r\n\t\t\t//Is lottery need redeemed?\r\n\t\t\tthis.doesRedeemLottery();\r\n\t\t\tthis.doesRedeemBonus();\r\n\t\t\t$(\"#free_play_form_button\").click();\r\n\t\t\t\r\n\t\tthis.waitBeforeChangePageTimer = setInterval(() => {\r\n\t\t\t\tif(isSelectorVisible(\"#free_play_result\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(this.waitBeforeChangePageTimer);\r\n\t\t\t\t\tpersistance.Update(this,false);\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t}\r\n\t\t\t},1000);\t\t\t\r\n\t\t}\r\n\t\t//console.log(\"roll redeemed\");\r\n\t}\r\n\t\r\n\tdoesRedeemLottery()\r\n\t{\r\n\t\tif(user.getAccountUnblockTickets() > 0)\r\n\t\t{\r\n\t\t\tgame.lottery.redeem();\r\n\t\t}\r\n\t}\r\n\t\r\n\tdoesRedeemBonus()\r\n\t{\r\n\t\t\r\n\t\t$(settings.selectors).each((i,b) => {\r\n\t\t\tuser.bonusActives = user.getActiveBonus();\r\n\t\t\tif (typeof(user.bonusActives[b]) == 'undefined')\r\n\t\t\t{\r\n\t\t\t\tlet bonus = game.bonus.find(e => e.selector == b);\r\n\t\t\t\tif (typeof(bonus) != 'undefined')\r\n\t\t\t\t\tsetInterval(() => bonus.redeem(b) ,randomInteger(10000))\r\n\t\t\t}})\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\teachMinutes()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\t\r\n}\r\nclass Bonus\r\n{\r\n\tcounter;\r\n\tselector;\r\n\tjQuerySelector;\r\n\tcontainer;\r\n\t\r\n\t\r\n\t\r\n\tconstructor(selector)\r\n\t{\r\n\t\tthis.selector = selector;\r\n\t\tthis.container = \"#bonus_container_\" + this.selector;\r\n\t\tthis.jQuerySelector = \"#bonus_span_\" + this.selector;\r\n\t\tthis.counter = new BonusCounter(selector);\r\n\t}\r\n\r\n\tredeem(selector){\r\n\t\t//console.log(selector +\" ask to be redeemed in\",this.counter.asSeconds());\r\n\t\tif (isSelectorReady(this.container) && isSelectorVisible(this.container)) return;\r\n\t\tif (user.bonusActives.indexOf(selector) > -1)\r\n\t\t\r\n\t\tvar collected = FindFirstLower(settings.redeems[selector][1],user.rewardPoints);\r\n\t\tif (collected == 0)\r\n\t\t{\r\n\t\t\t//console.log(\"No need!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRedeemRPProduct(settings.redeems[selector][0] + FindFirstLower(settings.redeems[selector][1],user.rewardPoints) / settings.redeems[selector][2]);\r\n\t\t//console.log(selector, \" ok for redeem\");\r\n\t}\r\n}\r\n\r\nclass Lottery\r\n{\r\n\t\r\n\twaitBeforeChangePageTimer = 0;\r\n\tconstructor()\r\n\t{\r\n\t\t\r\n\t}\r\n\t\r\n\tredeem()\r\n\t{\r\n\t\tlet accountUnblockTicketsAsBtc = parseFloat(user.getAccountUnblockTickets() * 0.00000001);\r\n\t\tif (user.getBtcBalance() > accountUnblockTicketsAsBtc){\r\n\t\t\tSwitchPageTabs('lottery');\r\n\t\t\t$(\"#lottery_tickets_purchase_count\").val(user.getAccountUnblockTickets());\r\n\t\t\t$(\"#purchase_lottery_tickets_button\").click();\t\r\n\r\n\t\t\tthis.waitBeforeChangePageTimer = setInterval(() => {\r\n\t\t\t\tif(isSelectorVisible(\"#lottery_tickets_purchase_message\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(this.waitBeforeChangePageTimer);\r\n\t\t\t\t\tSwitchPageTabs('free_play');\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t}\r\n\t\t\t},1000);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nclass Persistance\r\n{\r\n\tconstructor(format)\r\n\t{\r\n\t\tlet isGapiLoaded = setInterval(function() {\r\n\t\t    if(typeof(gapi) != 'undefined') {\r\n\t\t        clearInterval(isGapiLoaded); \r\n\t\t        handleGapiLoad('client:auth2',initClient);\r\n\t\t        let  signInGapiTimer = setInterval(function() {\r\n\t\t    \tif(typeof(gapi.client) != 'undefined') {\r\n\t\t        clearInterval(signInGapiTimer); \r\n\t\t        handleSignInClick();\r\n\t\t    let  getRollCounterTimer = setInterval(function() {\r\n\t\t    if(hasSignIn()) {\r\n\t\t\t    clearInterval(getRollCounterTimer); \r\n\t\t    }}, 100);\t\r\n\t\t    }}, 100);\r\n\t\t    }}, 100);\r\n\t}\r\n\t\r\n\t\r\n\tWriteDateAndCopy()\r\n\t{\r\n\t\tvar date = new Date().toLocaleString();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID ,\"'GCP Instances'!R\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",date);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!S\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",date);\r\n\t}\r\n\t\r\n\tWriteBtcBalanceAndCopy()\r\n\t{\r\n\t\tuser.btcBalance = user.getBtcBalance();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!L\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcBalance);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!M\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcBalance  - user.oldBtcBalance);\r\n\t\tuser.oldBtcBalance = user.btcBalance;\r\n\t}\r\n\t\r\n\r\n\tWriteBlockingTicketsAndCopy()\r\n\t{\r\n\t\tuser.blockingTickets = user.getAccountUnblockTickets();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!N\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.blockingTickets);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!O\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.blockingTickets - user.oldBlockingTickets);\r\n\t\tthis.oldBlockingTickets = user.blockingTickets;\r\n\t}\r\n\r\n\tWriteRewardPointsAndCopy()\r\n\t{\r\n\t\tuser.rewardPoints = user.getRpPoints();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!T\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.rewardPoints);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!U\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.rewardPoints - user.oldRewardPoints);\r\n\t\tuser.oldRewardPoints = user.rewardPoints;\r\n\t}\r\n\r\n\tUpdate(item,isTimeTicked){\r\n\t\tif (settings.excludedMails.indexOf(user.email) != -100)\r\n\t\t{\r\n\t\t\tif (isTimeTicked)\r\n\t\t\t{\r\n\t\t\t\tthis.WriteDateAndCopy();\r\n\t\t\t\tthis.WriteBtcBalanceAndCopy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!H\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcAddress);\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!K\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",item.counter.toString());\r\n\t\t\t\t\r\n\t\t\tthis.WriteBlockingTicketsAndCopy();\r\n\t\t\tthis.WriteBtcBalanceAndCopy();\r\n\t\t\tthis.WriteRewardPointsAndCopy();\r\n\t\t\tthis.WriteDateAndCopy();\r\n\t\t\t\r\n\t\t\tconsole.log(\"Le compte rebours pour le compte\",user.fieldLocationRow,\" update\");\r\n\t\t\t/*\r\n\t\t\t$(user.bonusActives).each((i,e) =>\r\n\t\t\t{\r\n\t\t\tlet col = charSet.indexOf(\"R\") + i;\t\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!\" + charSet[col]  + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",e.amount);\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tCreate(){\r\n\t\t\t\r\n\t}\r\n\t\r\n\tRead(){\r\n\t\t\r\n\t}\r\n}\r\n\r\nvar settings;\r\nvar user;\r\nvar game;\r\n\r\n\r\n\r\nwindow.onload = () => \r\n{\r\n\twhile(typeof($) === 'undefined')\r\n\t{\r\n\t\tsetInterval(isJqueryLoaded,1)\t\r\n\t}\r\n\t\r\n\tsettings = new Settings();\r\n\tpersistance = new Persistance();\r\n\tuser = new User();\r\n\tgame = new Game();\r\n\tstorage = new Storage();\r\n\t\r\n\tInjectJs(\"https://apis.google.com/js/api.js?v=\" + new Date().getTime(),true,true,\"\",\"\");\r\n\t$(\"<button id='gameTester;' onclick='game.gameTester(() => persistance.Update(game.roll,false))'>Tester</button>\").appendTo(\"#wait\");\r\n}\r\n","libs":[],"name":"AlerterOOP","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":false}},{"compiledCss":"","css":"/*\r\nvar config = sessionStorage.config === null ? JSON.parse(window.config) : \"\";\r\nvar user = null;\r\n\r\nvar adminAccountUrl = 'bentaleb.youness@gmail.com';\r\nvar securityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\r\n\r\nvar excludedMails = ['compte1_65c7@caramail.com'];\r\nvar checkedTimers = [];\r\nvar compteNumber = \"\";\r\nvar rpNeeds = [12,120,300,600,1200];\r\nvar profileMail = \"\";\r\nvar userRpPoints = \"\";\r\nvar redeems = [];\r\nredeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\r\nredeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\r\nvar nagscreenInterval,popupInterval = 0;\r\nvar isGapiLoaded;\r\nvar selectors = config != \"\" ? config.selectors : [\"fp_bonus\",\"free_points\"];\r\nvar process = [];\r\nvar intervalRef = 60000;//1mn\r\nvar timers = [];\r\nvar counters = [];\r\nvar counterTime = 0;\r\nvar forbiddenTimeZones = [];\r\nvar dateTimeCounterRegex = new RegExp(\"([0-9]+)h:([0-9]+)m:([0-9]+)s\");\r\nvar HourAsIsoDate = (hour) => { return new Date(new Date().toISOString().substring(0,11) + hour)};\r\nvar countdowns = [];\r\nvar balanceBtc = \"\";\r\n*/","id":"https://freebitco.in/?op=home,https://freebitco.in,!https://freebitco.in/?op=signup_page,!https://freebitco.in/?op=email_verify*","js":"class TimeZone\r\n{\r\n\ttimestart = null;\r\n\ttimeend = null;\r\n\t\r\n\tconstructor(hourInterval)\r\n\t{\r\n\t\tthis.timestart = HourAsIsoDate(hourInterval.low);\t\r\n\t\tthis.timeend = HourAsIsoDate(hourInterval.high);\r\n\t}\r\n\t\r\n\t\r\n\tisInInterval(hour) {return HourAsIsoDate(hour).getTime() < this.timeend.getTime() && HourAsIsoDate(hour).getTime() > this.timestart.getTime()};\r\n}\r\n\r\n\r\nclass Storage\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tconsole.log(\"sotrage loaded!\");\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass TimeSpan\r\n{\r\n\tseconds = 0;\r\n\tminutes = 0;\r\n\thours = 0;\r\n\t\r\n\tconstructor(seconds,minutes,hours)\r\n\t{\r\n\t\tthis.seconds = seconds;\r\n\t\tthis.minutes = minutes;\r\n\t\tthis.hours = hours;\r\n\t}\r\n}\r\nclass User\r\n{\r\n\temail = \"\";\r\n\trewardPoints = 0;\r\n\tbtcBalance = 0.0;\r\n\tbtcAddress = \"\";\r\n\tfieldLocationRow = 0;\r\n\tblockingTickets = 0;\r\n\tblockingTimer = 0;\r\n\tbonusActives = [];\r\n\toldBlockingTickets = 0;\r\n\toldBtcBalance = 0;\r\n\toldRewardPoints = 0;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.bonusActives = this.getActiveBonus();\r\n\t\tthis.email = this.getProfileMail();\r\n\t\tthis.btcBalance = this.getBtcBalance();\r\n\t\t\r\n\t\tif (this.btcBalance <= 0.00000004)\r\n\t\t\tif (!$(\"#disable_lottery_checkbox\").is(\":checked\"))\r\n\t\t\t\t$(\"#disable_lottery_checkbox\").click();\r\n\t\t\r\n\t\tthis.btcAddress = this.getBtcAddress();\r\n\t\tthis.fieldLocationRow = this.email == settings.adminAccountUrl ? 2 : this.getCellNumber();\r\n\t\tthis.fieldLocationRow = settings.excludedMails.indexOf(this.email) > -1 ? 102 : this.fieldLocationRow;\r\n\t\tthis.rewardPoints = this.getRpPoints();\r\n\t\t\r\n\t\tthis.blockingTimer = setInterval(() => {\r\n\t\t\tif(isSelectorReady(\".account_unblock_span.option_play_multiply_span\"))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(this.blockingTimer);\r\n\t\t\t\tthis.blockingTickets = this.getAccountUnblockTickets();\r\n\t\t\t}\r\n\t\t},1000);\r\n\t\t\r\n\t\t//init old values\r\n\t\tthis.oldRewardPoints = this.rewardPoints;\r\n\t\tthis.oldBtcBalance = this.btcBalance;\r\n\t\tthis.oldBlockingTickets = this.blockingTickets;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tgetActiveBonus(){\r\n\t\tvar activeBonus = $(\"#reward_points_bonuses_main_div\").find(\".free_play_bonus_box_span_large:nth-child(1)\");\r\n\t\tlet bonusActivated = [{'lottery':''}];\r\n\t\t//Some active bonus\r\n\t\tif (activeBonus.length > 0)\r\n\t\t{\r\n\t\t\t$(activeBonus).each((i,e) => {\r\n\t\t\t\tvar id = $(e).closest(\"div\").attr(\"id\").replace(\"bonus_container_\",\"\");\r\n\t\t\t\tvar multiplicateur = settings.redeems[id][2];\r\n\t\t\t\tvar item = $(e).text().replace(/[ _$&%a-zA-Z.+-]/g,'');\r\n\t\t\t\tvar amountActive = parseInt(item);\r\n\t\t\t\tif (!isNaN(amountActive))\r\n\t\t\t\t{\r\n\t\t\t\t\tbonusActivated[id] = amountActive * multiplicateur;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn bonusActivated;\r\n\t}\r\n\t\r\n\tgetBtcBalance() {\r\n\t\treturn parseFloat($(\".balanceli\").text().substring(0,10)) \r\n\t};\r\n\r\n\tgetBtcAddress() {return $(\"input[name='btc_address']\").val() };\r\n\t\r\n\tgetProfileMail() { return $(\"#edit_profile_form_email\").val()};\r\n\t\r\n\tgetRpPoints() { \r\n\t\t return $(\".user_reward_points\").text().replace(/,|\\./g,'');\r\n\t}\r\n\tgetCellNumber() {\r\n\t\tlet compteNumber = parseInt(this.email.split('@')[0].replaceAll(/[_a-z@\\.-]/g,''));\r\n\t\tcompteNumber = compteNumber > 1000 ? 4 : compteNumber;\r\n\t\treturn +compteNumber + 2;\r\n\t}\r\n\t\r\n\tgetAccountUnblockTickets() {\r\n\t\tlet accountUnblockTickets =  parseInt($(\".account_unblock_span.option_play_multiply_span\").html());\r\n\t\tif (isNaN(accountUnblockTickets))\r\n\t\t\treturn 0;\r\n\t\treturn accountUnblockTickets;\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\nclass Settings\r\n{\r\n\tselectors = [];\r\n\tredeems = [];\r\n\tadminAccountUrl = 'bentaleb.youness@gmail.com';\r\n\tsecurityToken = 'f2b89f26-1758-4d6d-873a-1000e5d350ee';\r\n\texcludedMails = ['compte1_65c7@caramail.com'];\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.selectors = [\"fp_bonus\",\"free_points\"];\r\n\t\tthis.redeems[\"fp_bonus\"] = [\"fp_bonus_\",[32,160,320,1600,3200],3.2];\r\n\t\tthis.redeems[\"free_points\"] = [\"free_points_\",[12,120,300,600,1200],12];\r\n\t}\r\n}\r\nclass Game\r\n{\r\n\troll;\r\n\tlottery;\r\n\tbonus = [];\r\n\tcounters =  [];\r\n\ttimers = []\r\n\tconstructor(){\r\n\t\tthis.roll = new Roll();\r\n\t\t$(settings.selectors).each((i,e)=>{\r\n\t\t\tthis.bonus.push(new Bonus(e));\r\n\t\t});\r\n\t\tthis.lottery = new Lottery();\r\n\t\tthis.ticks();\r\n\t}\r\n\t\r\n\tclearIntervals()\r\n\t{\r\n\t\tthis.timers.map(t => clearInterval(t));\r\n\t}\r\n\t\r\n\tticks()\r\n\t{\r\n\t\tthis.timers[\"roll\"] = setTimeout(() => {this.roll.redeem()},this.roll.counter.asSeconds() * 1000 + this.roll.counter.randomWaiting);\r\n\t\t/*\r\n\t\tthis.timers[\"lottery\"] = setInterval(() =>{ if (user.getAccountUnblockTickets() > 0) this.lottery.redeem()},1000 * 60 * 15 );\r\n\t\t*/\r\n\t\t\r\n\t\t/*\r\n\t\t$(this.bonus).each((i,b) => this.timers[b.selector] = setInterval(() => b.redeem(b.selector) ,\r\n\t\tb.counter.asSeconds() * 1000)  + b.counter.randomWaiting )\r\n\t\t*/\r\n\t}\r\n\t\r\n\t\r\n\tgameTester(callback)\r\n\t{\t\t\r\n\t\t//$(\"#gameTester\").on(\"click\",() => \r\n\t\tcallback();\r\n\t}\r\n\t\r\n}\r\nclass Counter\r\n{\r\n\tseconds = 0;\r\n\tminutes = 0;\r\n\thours = 0;\r\n\tselector = \"\";\r\n\ttimeRemaining = \"\";\r\n\tconstructor(selector)\r\n\t{\r\n\t\tthis.selector = selector;\r\n\t}\r\n\r\n\ttoString(){return this.hours + \":\" + (this.minutes == \"\" ? \"00\" : this.minutes) + \":\" + (this.seconds  == \"\" ? \"00\" : this.seconds);}\r\n\t\r\n\tasSeconds(){return moment.duration(this.toString()).asSeconds()};\r\n\t\r\n\t\r\n\tcountDown(){\r\n\t\tconsole.log(\"countdown called\");\r\n\t\t//CountDown(this.selector,this.asSeconds());\r\n\t}\r\n\t\r\n}\r\nclass RollCounter extends Counter\r\n{\r\n\trandomWaiting;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"roll\");\r\n\t\tthis.hours = \"00\";\r\n\t\tthis.randomWaiting = randomInteger(60000);\r\n\t\tsetInterval(() => {this.getTimer();},1000);\r\n\t}\r\n\t\r\n\t\r\n\tgetTimer()\r\n\t{\r\n\t\tthis.seconds = this.getSeconds();\r\n\t\tthis.minutes = this.getMinutes();\r\n\t\tthis.timeRemaining = this.toString();\r\n\t}\r\n\t\r\n\t\r\n\tgetSeconds() {return $(\"#time_remaining .countdown_amount\").eq(1).text();}\r\n\tgetMinutes(){return $(\"#time_remaining .countdown_amount\").eq(0).text();}\r\n\tgetHours(){}\r\n}\r\nclass BonusCounter extends Counter\r\n{\r\n\trandomWaiting;\r\n\ttimer = 0;\r\n\tduration;\r\n\tjQuerySelector = \"\";\r\n\tconstructor(selector)\r\n\t{\r\n\t\tsuper(selector);\r\n\t\tthis.jQuerySelector = \"#bonus_span_\" + this.selector;\r\n\t\tthis.randomWaiting = randomInteger(60000);\r\n\t\tconsole.log(\"class\",selector,\"created\");\r\n\t\tthis.duration = new TimeSpan();\r\n\t\tsetInterval(() => {this.timer = this.getBonusTimer(this.jQuerySelector)}, 1000);\r\n\t}\r\n\t\r\n\tgetBonusTimer(selector) {\r\n\t\t    if(isSelectorFilled(selector)) {\r\n\t\t        clearInterval(this.timer);\r\n\t\t        this.timeRemaining = $(selector).text().replace(/[a-zA-Z]/g,'');\r\n\t\t        [this.duration.hours, this.duration.minutes,this.duration.seconds] = this.timeRemaining.split(\":\");\r\n\t\t    }\r\n\t}\r\n\r\n\tgetHours(){ return this.hours; }\r\n\tgetMinutes(){ return this.minutes; }\r\n\tgetSeconds(){ return this.seconds; }\r\n}\r\n\r\n\r\nclass Roll\r\n{\r\n\trandomWaiting;\r\n\tcounter;\r\n\tselector;\r\n\tjQuerySelector;\r\n\twaitBeforeChangePageTimer;\r\n\t\r\n\tconstructor()\r\n\t{\r\n\t\tthis.selector = \"roll\";\r\n\t\tthis.jQuerySelector = \"\";\r\n\t\tthis.counter = new RollCounter();\r\n\t\tsetInterval(() => {console.log(\"Update toutes les MINUTES\");persistance.Update(this,true)},1000 * 60 * 2);\r\n\t}\r\n\t\r\n\tredeem()\r\n\t{\r\n\t\t//console.log(\"roll ask to be redeemed in\",this.counter.asSeconds());\r\n\t\tif (!isSelectorReady(\"#free_play_form_button\")) return;\r\n\t\t\r\n\t\tif(this.isAnyCaptcha()) return;\r\n\t\t\r\n\t\tif (this.counter.asSeconds() == 0)\r\n\t\t{\r\n\t\t\t//Is lottery need redeemed?\r\n\t\t\tthis.doesRedeemLottery();\r\n\t\t\tthis.doesRedeemBonus();\r\n\t\t\t$(\"#free_play_form_button\").click();\r\n\t\t\t\r\n\t\tthis.waitBeforeChangePageTimer = setInterval(() => {\r\n\t\t\t\tif(isSelectorVisible(\"#free_play_result\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(this.waitBeforeChangePageTimer);\r\n\t\t\t\t\tpersistance.Update(this,false);\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t}\r\n\t\t\t},1000);\t\t\t\r\n\t\t}\r\n\t\t//console.log(\"roll redeemed\");\r\n\t}\r\n\t\r\n\tisAnyCaptcha()\r\n\t{\r\n\t\treturn isSelectorReady(\"#free_play_recaptcha\") && isSelectorVisible(\"#free_play_recaptcha\")\r\n\t\t|| isSelectorReady(\"#free_play_double_captchas\") && isSelectorVisible(\"#free_play_double_captchas\");\r\n\t}\r\n\t\r\n\t\r\n\tdoesRedeemLottery()\r\n\t{\r\n\t\tif(user.getAccountUnblockTickets() > 0)\r\n\t\t{\r\n\t\t\tgame.lottery.redeem();\r\n\t\t}\r\n\t}\r\n\t\r\n\tdoesRedeemBonus()\r\n\t{\r\n\t\t\r\n\t\t$(settings.selectors).each((i,b) => {\r\n\t\t\tuser.bonusActives = user.getActiveBonus();\r\n\t\t\tif (typeof(user.bonusActives[b]) == 'undefined')\r\n\t\t\t{\r\n\t\t\t\tlet bonus = game.bonus.find(e => e.selector == b);\r\n\t\t\t\tif (typeof(bonus) != 'undefined')\r\n\t\t\t\t\tsetInterval(() => bonus.redeem(b) ,randomInteger(10000))\r\n\t\t\t}})\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\teachMinutes()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\t\r\n}\r\nclass Bonus\r\n{\r\n\tcounter;\r\n\tselector;\r\n\tjQuerySelector;\r\n\tcontainer;\r\n\t\r\n\t\r\n\t\r\n\tconstructor(selector)\r\n\t{\r\n\t\tthis.selector = selector;\r\n\t\tthis.container = \"#bonus_container_\" + this.selector;\r\n\t\tthis.jQuerySelector = \"#bonus_span_\" + this.selector;\r\n\t\tthis.counter = new BonusCounter(selector);\r\n\t}\r\n\r\n\tredeem(selector){\r\n\t\t//console.log(selector +\" ask to be redeemed in\",this.counter.asSeconds());\r\n\t\tif (isSelectorReady(this.container) && isSelectorVisible(this.container)) return;\r\n\t\tif (user.bonusActives.indexOf(selector) > -1)\r\n\t\t\r\n\t\tvar collected = FindFirstLower(settings.redeems[selector][1],user.rewardPoints);\r\n\t\tif (collected == 0)\r\n\t\t{\r\n\t\t\t//console.log(\"No need!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRedeemRPProduct(settings.redeems[selector][0] + FindFirstLower(settings.redeems[selector][1],user.rewardPoints) / settings.redeems[selector][2]);\r\n\t\t//console.log(selector, \" ok for redeem\");\r\n\t}\r\n}\r\n\r\nclass Lottery\r\n{\r\n\t\r\n\twaitBeforeChangePageTimer = 0;\r\n\tconstructor()\r\n\t{\r\n\t\t\r\n\t}\r\n\t\r\n\tredeem()\r\n\t{\r\n\t\tlet accountUnblockTicketsAsBtc = parseFloat(user.getAccountUnblockTickets() * 0.00000001);\r\n\t\tif (user.getBtcBalance() > accountUnblockTicketsAsBtc){\r\n\t\t\tSwitchPageTabs('lottery');\r\n\t\t\t$(\"#lottery_tickets_purchase_count\").val(user.getAccountUnblockTickets());\r\n\t\t\t$(\"#purchase_lottery_tickets_button\").click();\t\r\n\r\n\t\t\tthis.waitBeforeChangePageTimer = setInterval(() => {\r\n\t\t\t\tif(isSelectorVisible(\"#lottery_tickets_purchase_message\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(this.waitBeforeChangePageTimer);\r\n\t\t\t\t\tSwitchPageTabs('free_play');\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t}\r\n\t\t\t},1000);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nclass Persistance\r\n{\r\n\tconstructor(format)\r\n\t{\r\n\t\tlet isGapiLoaded = setInterval(function() {\r\n\t\t    if(typeof(gapi) != 'undefined') {\r\n\t\t        clearInterval(isGapiLoaded); \r\n\t\t        handleGapiLoad('client:auth2',initClient);\r\n\t\t        let  signInGapiTimer = setInterval(function() {\r\n\t\t    \tif(typeof(gapi.client) != 'undefined') {\r\n\t\t        clearInterval(signInGapiTimer); \r\n\t\t        handleSignInClick();\r\n\t\t    let  getRollCounterTimer = setInterval(function() {\r\n\t\t    if(hasSignIn()) {\r\n\t\t\t    clearInterval(getRollCounterTimer); \r\n\t\t    }}, 100);\t\r\n\t\t    }}, 100);\r\n\t\t    }}, 100);\r\n\t}\r\n\t\r\n\t\r\n\tWriteDateAndCopy()\r\n\t{\r\n\t\tvar date = new Date().toLocaleString();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID ,\"'GCP Instances'!R\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",date);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!S\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",date);\r\n\t}\r\n\t\r\n\tWriteBtcBalanceAndCopy()\r\n\t{\r\n\t\tuser.btcBalance = user.getBtcBalance();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!L\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcBalance);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!M\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcBalance  - user.oldBtcBalance + \"/\" + user.oldBtcBalance);\r\n\t\tuser.oldBtcBalance = user.btcBalance;\r\n\t}\r\n\t\r\n\r\n\tWriteBlockingTicketsAndCopy()\r\n\t{\r\n\t\tuser.blockingTickets = user.getAccountUnblockTickets();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!N\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.blockingTickets);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!O\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.blockingTickets - user.oldBlockingTickets + \"/\" + user.oldBlockingTickets);\r\n\t\tthis.oldBlockingTickets = user.blockingTickets;\r\n\t}\r\n\r\n\tWriteRewardPointsAndCopy()\r\n\t{\r\n\t\tuser.rewardPoints = user.getRpPoints();\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!T\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.rewardPoints);\r\n\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!U\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.rewardPoints - user.oldRewardPoints + \"/\" + user.oldRewardPoints);\r\n\t\tuser.oldRewardPoints = user.rewardPoints;\r\n\t}\r\n\r\n\tUpdate(item,isTimeTicked){\r\n\t\tif (settings.excludedMails.indexOf(user.email) != -100)\r\n\t\t{\r\n\t\t\tif (isTimeTicked)\r\n\t\t\t{\r\n\t\t\t\tthis.WriteDateAndCopy();\r\n\t\t\t\tthis.WriteBtcBalanceAndCopy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!H\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",user.btcAddress);\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!K\" + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",item.counter.toString());\r\n\t\t\t\t\r\n\t\t\tthis.WriteBlockingTicketsAndCopy();\r\n\t\t\tthis.WriteBtcBalanceAndCopy();\r\n\t\t\tthis.WriteRewardPointsAndCopy();\r\n\t\t\tthis.WriteDateAndCopy();\r\n\t\t\t\r\n\t\t\tconsole.log(\"Le compte rebours pour le compte\",user.fieldLocationRow,\" update\");\r\n\t\t\t/*\r\n\t\t\t$(user.bonusActives).each((i,e) =>\r\n\t\t\t{\r\n\t\t\tlet col = charSet.indexOf(\"R\") + i;\t\r\n\t\t\tWriteToCsv(GOOGLE_SHEET_ID,\"'GCP Instances'!\" + charSet[col]  + user.fieldLocationRow,\"RAW\",\"FORMATTED_STRING\",e.amount);\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tCreate(){\r\n\t\t\t\r\n\t}\r\n\t\r\n\tRead(){\r\n\t\t\r\n\t}\r\n}\r\n\r\nvar settings;\r\nvar user;\r\nvar game;\r\n\r\n\r\n\r\nwindow.onload = () => \r\n{\r\n\twhile(typeof($) === 'undefined')\r\n\t{\r\n\t\tsetInterval(isJqueryLoaded,1)\t\r\n\t}\r\n\t\r\n\tsettings = new Settings();\r\n\tpersistance = new Persistance();\r\n\tuser = new User();\r\n\tgame = new Game();\r\n\tstorage = new Storage();\r\n\t\r\n\tInjectJs(\"https://apis.google.com/js/api.js?v=\" + new Date().getTime(),true,true,\"\",\"\");\r\n\t$(\"<button id='gameTester;' onclick='game.gameTester(() => persistance.Update(game.roll,false))'>Tester</button>\").appendTo(\"#wait\");\r\n}\r\n","libs":[],"name":"AlerterOOP","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}}]}