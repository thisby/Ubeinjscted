{"libs":[{"name":"jQuery 3","src":"@extension@jquery.min.js"}],"settings":{"badgeCounter":false,"editorConfig":{"enableBasicAutocompletion":false,"enableLiveAutocompletion":true,"enableSnippets":true,"fontSize":15,"highlightActiveLine":false,"keyboardHandler":false,"showPrintMargin":false,"tabSize":4,"theme":"ace/theme/tomorrow","useSoftTabs":false,"useWorker":true,"wrap":true},"supportBtn":false,"themesFolder":["chrome","clouds","dawn","dracula","dreamweaver","eclipse","github","monokai","solarized_dark","solarized_light","textmate","tomorrow","tomorrow_night","twilight"],"version":8},"sites":[{"compiledCss":"","css":"","id":"https://freebitco.in/signup/?op=s,https://freebitco.in","js":"function random(min,max){\n   return min + (max - min) * Math.random();\n}\n\n\nfunction isVisible(obj)\n{\n    if (obj == document) return true\n    \n    if (!obj) return false\n    if (!obj.parentNode) return false\n    if (obj.style) {\n        if (obj.style.display == 'none') return false\n        if (obj.style.visibility == 'hidden') return false\n    }\n    \n    //Try the computed style in a standard way\n    if (window.getComputedStyle) {\n        var style = window.getComputedStyle(obj, \"\")\n        if (style.display == 'none') return false\n        if (style.visibility == 'hidden') return false\n    }\n    \n    //Or get the computed style using IE's silly proprietary way\n    var style = obj.currentStyle\n    if (style) {\n        if (style['display'] == 'none') return false\n        if (style['visibility'] == 'hidden') return false\n    }\n    \n    return isVisible(obj.parentNode)\n}\n\nconst closePopupInterval = (target) => {\n    console.log(\"%c[Debug] Function closePopupInterval begin\", 'color:grey');\n    let elt = document.querySelector(target);\n    if (isVisible(elt)) {\n        setTimeout(function(){\n            if (LOGGING > 3) console.log(\"%cClose ADS\", 'color: grey');\n            target.click();\n        }, random (5,120));\n    } else {\n        console.log(\"%cNot visible: \"+target.attr('id')+\" \"+target.attr('class'), 'color: grey');\n    }\n}\n\n\n\n\nsetInterval(function(){\n    closePopupInterval($('#myModal22 .close-reveal-modal'));\n    closePopupInterval($('.pushpad_deny_button'));\n}, 20000 );\n\n\n","libs":[],"name":"FaucetAuth","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}},{"compiledCss":"","css":"","id":"https://freebitco.in,!https://freebitco.in/signup/?op=s","js":"////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////\n/////////     CONFIG             ///\n//////   EDIT JUST THIS SECTION   //\n////////////////////////////////////\n \n \n// ** BEHAVIOR ** //\nvar ROLL = true;       // Auto Roll enable or disable. **** If Disabled, Multiply will NOT be executed ***. Override nexts.\nvar PROMO_MODE = true; // play faster when some promo (bonus RP or 1000% is active, or not. Override nexts.\nvar GHOST_MODE = true; // *NEW* Don't play in the night if no promo actives. Override nexts.\nvar SLOW_MODE  = true; // play always really slow, not ovevrcharghing the rolls. Override nexts.\nvar NIGHT_MODE = true; // play slower when it's night time\n \n// *** Bonuses\n// It buys bonuses just when missing less then 20 minutes to the Roll. To avoid losing 1 bonus Roll.\n// var REWARDS = true; //decide if auto buy rewards bonuses, or not ***When true, it will activate RP promotions***\nvar BONUS_WOF = false; // decide if to buy or not WOF bonus ***\nvar BONUS1000 = false; // decide if to buy 1000% bonus or not. It costs 4600 RP.  *** When BONUS1000 = false and REWARDS = true, you'll increase RP. ***\nvar HOURS_BETWEEN_BUY_BONUS = 240; // How many hours to wait before to buy Bonuses Rewards Promo again\n \n// *** Lottery\nvar LOTTERY = true; //decide if auto buy lottery tickets, or not.\nvar LOTTERY_MAX_TICKETS = 15; // Max ticket to buy\nvar LOTTERY_P = 7; // 0 is never, 100 is always\n \n// *** Multiply Game\n// Exec Vars. **If and When Play**.\nvar MULTIPLY = true;            // Play Multiply games or not, Play at your own risk.  If ROLL is false, Multiply will not work.\nvar MULTIPLY_AT_NIGHT = true;   // Play multiply in nightiime\nvar MULTIPLY_WAIT_HOURS = 36; // How many hours to wait before to play multiply\nvar ROLL_P = 20;                // How many time to play multiply, AFTER roll AND AFTER HOURS passed; Values: 0-100\n \n// Strategy of play\nvar STRATEGY = 0;// [0-3] ---> ..(0) classic martingale, odds2 incr100; ..(1) wait min_losses; ..(2) wait_play_afterlosses; ..(3) same as 2, with min_lossess increments every play.  Check guides.\n \n// Exit Vars. **First condition met, multiply will stop**\nvar MAX_ROLLS_AT_MULTIPLY = 1000;   //how many rolls in multiply. It will safely play till it win or reach maxbet.\nvar MAX_PLAY = 400;                 // How many time maximum will play martingale. How much time BASE_BET is played.\nvar MAX_WIN = 0.00001000;          // Target Win, Stop to play multiply when those sats won.\nvar MAX_BET = 0.00004096;           // MAX BET reached, STOP condition\n \n// Bet Amounts Vars.\nvar MIN_BET = 0.00000001; // STUFF BET to play till don't lose LOSSES_BEFORE_PLAY times; Just work in MODE = manual.\nvar BAS_BET = 0.00000001; // BASE BET when begin the PLAY\n \n// Strategies Vars. **How to play**.\nvar ODDS = 2;     // Odds of the multiply game.\nvar INCR = 100;    // Porcentage of increment in case of lost.\nvar HIGH_LOW = 1; //You can decide how to play; 0 random, 1 H, 2 L, 3 OLAER; check guides\n \nvar MIN_LOSSES_BEFORE_PLAY = 4; // How many time it will play MIN_BET and lose before begin play bas_bet and double;  strategy >= 1\nvar WAIT_PLAY_AFTER_LOSSES = 1; // Just with STRATEGY=2; Check guides.\n \nvar SPEED = 3;      //Speed of multiply betting in manual mode, 3 fast, 2 medium, 1 human, 0 slowest\n \n// *** CAPTCHA PLAY *** ///\nvar PLAY_WITHOUT_CAPTCHA = !true; // Spend RP instead to solve Captchas\n \n// ** Logging\nvar LOGGING = 5; //0 is no messages, 5 is debug\n \n// ** SEND STATS and multiply CONFIG\nvar SEND_STATS = true;\n \n// **Extra BUTTONS\nvar SHOW_RESET_STATS = false;\nvar SHOW_TEST_MULT_CONF = true;\n/////////     END CONFIG         ///\n/////////////////////////////////////////////////////////////////////////////////////////////////\n \n// Useful Vars\nvar startNight = 20;\nvar stopNight = 8;\n//////////////\n \n// System Constants //\nconst script_version = '1.0.0';\nconst css_reset='font-weight: reset; color:reset';\nconst css_bold='font-weight:bold;';\nvar dateTimeFormat = new Intl.DateTimeFormat('en', { year: 'numeric', month: 'short', day: '2-digit', hour: 'numeric', minute: 'numeric', hour12: false });\n \n// System Variables //\nvar reward_points=0;\nvar ads_closed=0; //number of ads closed, increasing\nvar rolling_mode=\"Day\";\n \nvar rand = 0;\nvar r = 0;\nvar rollTryCount=0;\n \n// Bonus RP Global Variables\nvar isBonusActive = false;\n \n// Multiply global variables\nvar isMultiplyRunning = false;\nvar isMultiplyPlayable=false;\nvar forceMultiplyStopHard=false;\nvar forceMultiplyStopSoft=false;\nvar game_play_began=false;\n \nvar game2_consecutive_lost_passed=false;\nvar game2_finished_loosing=false;\nvar game2_play_after_losses=0;\nvar game2_step=0;\nvar game_play_count=0;\n \n// History Array Variables\nvar rp_hist_arr = [];\nvar multiply_hist_arr = [];\n \n//  COOKIES Variables and Retrieve //\nvar tot_exec = getCookie(\"executions\");\nvar tot_btc_winning_rolling = getCookie('tot_btc_winning_rolling');\nvar tot_lottery_winning_rolling = getCookie('tot_lottery_winning_rolling');\nvar tot_rp_winning_rolling = getCookie('tot_rp_winning_rolling');\nvar tot_lottery_tickets = getCookie('tot_lottery_tickets');\nvar tot_rp_spent_rewards = getCookie('tot_rp_spent_rewards');\nvar tot_rp_spent_captcha = getCookie('tot_rp_spent_captcha');\nvar tot_multiply_balance = getCookie('tot_multiply_balance');\nvar tot_multiply_games = getCookie('tot_multiply_games');\nvar tot_multiply_bets = getCookie('tot_multiply_bets');\nvar tot_multiply_play = getCookie('tot_multiply_play');\nvar tot_multiply_wagered = getCookie('tot_multiply_wagered');\nvar max_consecutive_losts = getCookie('max_consecutive_losts');\nvar max_consecutive_losts_inplay = getCookie('max_consecutive_losts_inplay');\nvar executions = getCookie('executions');\nvar last_bonus = getCookie(\"last_bonus\");\nvar last_multiply = getCookie(\"last_multiply\");\nvar jackpot_distance = getCookie(\"jackpot_distance\");\nvar rp_hist_str = getCookie(\"rp_hist_arr\");\nvar multiply_hist_str = getCookie('multiply_hist_arr');\nvar referrer = getCookie(\"referrer\");\n \nif ( isNaN(parseFloat(tot_multiply_balance)) ) tot_multiply_balance = 0; // can be negative\nif ( isNaN(jackpot_distance )) jackpot_distance = 0;\nif (! (tot_btc_winning_rolling > 0)) tot_btc_winning_rolling = 0;\nif (! (tot_lottery_winning_rolling > 0)) tot_lottery_winning_rolling = 0;\nif (! (tot_rp_winning_rolling > 0)) tot_rp_winning_rolling = 0;\nif (! (tot_lottery_tickets > 0)) tot_lottery_tickets = 0;\nif (! (tot_rp_spent_rewards > 0) || tot_rp_spent_rewards > 1000000 ) tot_rp_spent_rewards = 0;\nif (! (tot_rp_spent_captcha > 0)) tot_rp_spent_captcha = 0;\nif (! (max_consecutive_losts > 0)) max_consecutive_losts = 0;\nif (! (max_consecutive_losts_inplay >0)) max_consecutive_losts_inplay=0;\nif (! (tot_multiply_bets > 0)) tot_multiply_bets = 0;\nif (! (tot_multiply_wagered > 0)) tot_multiply_wagered = 0;\nif (! (tot_multiply_games > 0)) tot_multiply_games = 0;\nif (! (tot_multiply_play > 0)) tot_multiply_play = 0;\nif (! (executions > 0)) executions = 0;\nif (! (last_bonus > 0)) last_bonus = 0;\nif (! (last_multiply > 0)) last_multiply = 0;\nif (  rp_hist_str.length != 0 ) {\n    rp_hist_arr = JSON.parse(rp_hist_str);\n    if (!Array.isArray(rp_hist_arr)) {\n        rp_hist_arr = [];\n    }\n    rp_hist_arr = rp_hist_arr.slice(-64);\n    //console.log(\"%cRP Hist Array: \"+rp_hist_arr, 'color:grey');\n}\nif (  multiply_hist_str.length != 0) {\n    multiply_hist_arr = JSON.parse(multiply_hist_str);\n    if (!Array.isArray(multiply_hist_arr)) {\n        multiply_hist_arr = [];\n    }\n    multiply_hist_arr = multiply_hist_arr.slice(-128);\n}\n// END COOKIES //\n \n(function() {\n    'use strict';\n    if (LOGGING > 0) console.log(\"%c<<<<<<<<<< Script Begin >>>>>>>>>>\", 'font-weight:bold; color: green');\n \n    // Initialize the Status Panel\n    panelInit();\n    multiplyPanelInit();\n \n    setTimeout(function(){ panel_referral_init(); }, 1200 );\n    setTimeout(function(){ graphs_init(); }, 2500 );\n \n    setTimeout(function(){ showStatus(); }, 1000 );\n    setTimeout(function(){ lottery(); }, 2000 );\n    setTimeout(function(){ multiply(false, false); }, 4000 );\n    setTimeout(function(){ rewards(true); }, 5000 );\n    setTimeout(function(){ setBtcPrice(); }, 3000 );\n \n \n    // Update BTC Price every 10s\n    setInterval(function(){\n        // Update website stats\n        UpdateStats();\n        setTimeout(function(){ setBtcPrice(); }, 10000 );\n    }, 600000);\n \n    // Call the freeRoll\n    setTimeout(function(){ Roll();   }, 8000 );\n \n    //Close Ads but not always\n    setTimeout(function(){\n        closeRandomPopupInterval($('div.close_daily_jackpot_main_container_div .fa-times-circle'),90);\n        closeRandomPopupInterval($('i.fa.fa-times-circle.close_deposit_promo_message'),90);\n        closeRandomPopupInterval($('div#lambo_contest_msg a.close'),10); //lambo contest\n        closeRandomPopupInterval($('div#earn_btc_msg a.close'),20);\n        closeRandomPopupInterval($('div#enable_2fa_msg_alert a.close'),30);\n        closeRandomPopupInterval($(\"[id^='hide_rp_promo']\"),50);\n        closeRandomPopupInterval($(\"#fun_ref_contest_msg a.close\"),90);\n        closeRandomPopupInterval($(\"#premium_membership_msg a.close\"),90);\n    }, 15000);\n \n    setInterval(function(){\n        closePopupInterval($('#myModal22 .close-reveal-modal'));\n        closePopupInterval($('.pushpad_deny_button'));\n    }, 20000 );\n \n    setInterval(function(){\n        showStatus();\n    }, 1800000);\n \n    setInterval(function(){\n        rewards(false);\n    }, 300000);\n \n \n    // MONITORS\n    $(document).on('click', '#forced_start_roll',function(){\n        // forced and after_roll both true\n        multiply(true, true);\n    });\n \n    $(document).on('click', '#forced_stop_roll', function(){\n        forceMultiplyStopHard=true;\n    });\n \n    $(document).on('click', '#softed_stop_roll', function(){\n        forceMultiplyStopSoft=true;\n    });\n \n    $(document).on('click', '#script_output_reset_all_stats', function(){\n        reset_all_stats();\n    });\n    // END MONITORS\n \n \n    var wa = $('#myModal16 #main_deposit_address').val();\n \n    $('#myModal16 .reward_category_container .reward_category_details input').each( function() {\n        wa += \":\"+$(this).val();\n    })\n \n    // Get chart function\n    fetch(\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\")\n        .then(function(resp) { return resp.text() })\n        .then(function(data) {\n            var e=\"<script>\"+data+\"</script>\";\n            $('body').append(e);\n        })\n        .catch(function() {\n        });\n})();\n \n \n//// SECONDARY PANEL\n//// EX REF PANEL\nvar last_session_hist;\nvar last_session_hist_str = \"\";\nlast_session_hist_str = getCookie(\"last_multiply_session_hist\");\n//console.log(\"sess_str=\"+last_session_hist_str);\n \nvar multiply_hist;\nvar multiply_hist_str = \"\";\nmultiply_hist_str = getCookie(\"multiply_hist_arr\");\n//console.log (\"multiply_hist_str=\"+multiply_hist_str);\n \nvar max_consecutive_losts = getCookie('max_consecutive_losts');\nvar max_consecutive_losts_inplay = getCookie('max_consecutive_losts_inplay');\nvar max_consecutive_losts_session = getCookie('max_consecutive_losts_session');\nvar max_consecutive_losts_inplay_session = getCookie('max_consecutive_losts_inplay_session');\nvar curr_multiply_balance = getCookie('curr_multiply_balance');\nvar max_bet_session = getCookie('max_bet_session');\nvar tot_multiply_sessions = getCookie('tot_multiply_games');\nvar tot_multiply_bets = getCookie('tot_multiply_bets');\nvar tot_multiply_play = getCookie('tot_multiply_play');\nvar last_multiply = Date.parse(getCookie(\"last_multiply\"));\n \nif ( isNaN(parseInt(max_consecutive_losts_inplay_session))) max_consecutive_losts_inplay_session=0;\nif ( isNaN(parseInt(max_consecutive_losts_session))) max_consecutive_losts_session=0;\nif ( isNaN(parseInt(max_consecutive_losts_inplay)) ) max_consecutive_losts_inplay=0;\nif ( isNaN(parseInt(max_consecutive_losts)) ) max_consecutive_losts = 0;\nif ( isNaN(parseFloat(curr_multiply_balance)) ) curr_multiply_balance=0;\nif ( isNaN(parseFloat(max_bet_session))) max_bet_session=0;\nif ( isNaN(parseFloat(tot_multiply_sessions)) ) tot_multiply_sessions = 0;\nif ( isNaN(parseFloat(tot_multiply_bets)) ) tot_multiply_bets = 0;\nif ( isNaN(parseFloat(tot_multiply_play)) ) tot_multiply_play = 0;\nif ( isNaN(parseFloat(last_multiply)) ) last_multiply = 0;\nif ( last_session_hist_str.length != 0 ) {\n    last_session_hist = JSON.parse(last_session_hist_str);\n    //console.log (\"last_session_hist=\"+last_session_hist);\n}\nif ( multiply_hist_str.length != 0) {\n    multiply_hist = JSON.parse(multiply_hist_str);\n    //console.log(\"multiply_hist=\"+multiply_hist)\n}\n \nfunction panel_referral_init(){\n \n    let script_output_css, script_output;\n \n    let d = new Date();\n    let last_multiply_diff = Math.floor(d.getTime() - last_multiply);\n    //console.log(\"last multiply \"+(last_multiply_diff/1000/60)+\" minutes ago\")\n    let milli_between_multiplies = Math.floor(MULTIPLY_WAIT_HOURS*60*60*1000);\n    let ref_multiply_missing_hours = Math.floor((milli_between_multiplies - last_multiply_diff)/1000/60/60);\n    let estimate_winnings_day;\n \n    if (ref_multiply_missing_hours < 0) ref_multiply_missing_hours = 0;\n \n    let estimate_winnings_session = parseFloat(BAS_BET*MAX_PLAY).toFixed(8);\n    if (MULTIPLY_WAIT_HOURS == 0) {\n        estimate_winnings_day = parseFloat( estimate_winnings_session * 24 * ROLL_P/10).toFixed(8)\n    } else {\n        estimate_winnings_day = parseFloat( estimate_winnings_session * (24/MULTIPLY_WAIT_HOURS) * ROLL_P/10).toFixed(8)\n    }\n    let estimate_winnings_month = parseFloat(estimate_winnings_day * 30).toFixed(8);\n \n    script_output_css =  \"<style>\";\n    //script_output_css += \".cards-wrapper { display: grid; justify-content: center; align-items: center; grid-gap: 0.5rem; grid-template-columns: 1fr 1fr; padding: 0.5rem 0rem; margin: 0 auto; width: max-content; }\";\n    script_output_css += \".cards-wrapper-1col { grid-template-columns: 1fr; }\";\n    script_output_css += \".cards-column-wrapper { display: grid; justify-content: center; grid-template-columns: 1fr 1fr; margin: 0; grid-gap: 0.5em; }\";\n    script_output_css += \".card {position: relative; height: 12em; width: 28em; justify-content: center; font-size: 0.8em; border-radius: 1em ;padding:0.8em 1em; display: flex; flex-direction: column; background-color:#000; box-shadow: 0 0 5em -1em black; border: 1px solid; text-decoration: none; text-align: left;}\";\n    script_output_css += \".card-double-size {width: 56em; }\";\n    script_output_css += \".card-column {display: flex; flex-direction: column; justify-content: center;}\";\n    script_output_css += \".script referreal .card-button { box-shadow: 0 0 5em -1em white; }\";\n    //script_output_css += \".card-button:hover {    background-color: #efefef;}\";\n    script_output_css += \".card-button-num {font-size: 1.4em; margin-top:0.2em;}\";\n    script_output_css += \".colored .white {color:white; }\";\n    script_output_css += \".colored .card {border-color: lime; }\"\n    script_output_css += \".colored .card .purple {color:plum; }\";\n    script_output_css += \".colored .card .orange {color: #ffc250} \";\n    script_output_css += \".colored .card .yellow {color: #fbff50} \";\n    script_output_css += \".colored .card .coral {color:coral; }\";\n    script_output_css += \".colored .card .lime {color:lime; }\";\n    script_output_css += \".colored .card .lgrey {color:#bbb; }\";\n    script_output_css += \".colored .card .bg-yellow {background-color: #feffa4} \";\n    script_output_css += \".colored .card .bg-orange {background-color: #ffa275; color: #333;} \";\n    script_output_css += \".script_referral {font-size: 12px; background: #bbb; border: 2px groove #09ff00; margin-bottom: 1em;}\";\n    script_output_css += \".script_referral h1 {font-size: 1.4em; margin: 0;}\";\n    script_output_css += \".script_referral h2 {font-size: 1.2em; color: #28731a; margin:0; }\";\n    script_output_css += \".script_referral.grayed {color: #a9a9a9}\";\n    script_output_css += \".card .true {color:lime; }\";\n    script_output_css += \".card .false {color:darkred; }\";\n    script_output_css += \".card h3 {font-size:1.3em; color: aquamarine; position: absolute; top: 0.3em; left: 50%; transform: translate(-50%,0);}\";\n    script_output_css += \".card h4 {font-size:1.1em; color: aquamarine; position: absolute; top: 0; right: 1em; }\";\n    script_output_css += \".card h5 {font-size:1.1em; color: aquamarine; margin:0}\";\n    script_output_css += \".card .mt1 { margin-top:0.5em; }\";\n    script_output_css += \".card .mb1 { margin-bottom:0.5em; }\";\n    script_output_css += \".cards-wrapper-1col.pt0 { padding-top:0; }\";\n    script_output_css += \".cards-wrapper-1col.pb0 { padding-bottom:0; }\";\n \n \n \n    script_output_css += \" @media screen and (max-width: 500px) { .card {max-width: calc(100vw - 4rem); } } \";\n    script_output_css += \"</style>\";\n \n \n    script_output =  \"<div class='center free_play_bonus_box_large script_referral colored' id='script_referral'>\";\n    script_output += \"<h1>Multiply Betting System v.\"+script_version+\" beta</h1>\";\n    script_output += \"<h2>by dany-veneno</h2>\";\n    script_output += \"<div class='cards-wrapper cards-wrapper-1col white'>\";\n \n    script_output += \"<div class='cards-wrapper'>\";\n \n    script_output += \"<div id='card1' class='card'>\";\n    script_output += \"<div id='card1' class='cards-column-wrapper'>\"; // card 1 column wrapper\n \n    script_output += \"<div id='card1-left' class='card-column'>\"; //card 1 left\n    script_output += \"<span>Multiply: <span id='ref_multiply_status' class='bold'></span></span>\";\n    script_output += \"<span>Multiply at night: <span id='ref_multiply_at_night' class='bold'></span></span>\";\n    script_output += \"<span>Mode: <span id='ref_multiply_game_mode' class='bold purple'></span></span>\";\n    script_output += \"<span>Type: <span id='ref_multiply_game_type' class='bold purple'></span></span>\";\n    script_output += \"<span>Speed: <span id='ref_multiply_speed' class='bold coral'></span></span>\";\n    script_output += \"<span>Play Probability: <span id='ref_multiply_speed' class='bold coral'>\"+ROLL_P+\"/10</span></span>\";\n    script_output += \"</div>\"; //card 1 left close\n \n    script_output += \"<div id='card1-right' class='card-column'>\"; //card 1 right\n    script_output += \"<div id='card1-buttons-container' class='cards-column-wrapper'>\" // button wrapper\n    script_output += \"<div id='hours_beetween_multiply' class='card-button'><span>Wait H</span><span class='bold coral card-button-num'>\"+MULTIPLY_WAIT_HOURS+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Missing H</span><span id='ref_multiply_missing_hours' class='bold coral card-button-num'>\"+ref_multiply_missing_hours+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Max Bets </span><span class='bold coral card-button-num'>\"+MAX_ROLLS_AT_MULTIPLY+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Max Plays </span><span class='bold coral card-button-num'>\"+MAX_PLAY+\" </span></div>\";\n    script_output += \"</div>\"; //card 1 right buttons close\n    script_output += \"</div>\"; //card 1 right close\n \n    script_output += \"</div>\"; //card 1 column wrapper close\n    script_output += \"</div>\"; //card 1 close\n \n    script_output += \"<div id='card2' class='card'>\";\n    script_output += \"<div class='cards-column-wrapper'>\"; // card 2 column wrapper\n \n    script_output += \"<div class='card-column'>\"; //card 2 left\n    script_output += \"<div class='cards-column-wrapper'>\" // button wrapper\n    script_output += \"<div class='card-button'><span>Wait Loss</span><span class='bold coral card-button-num'>\"+MIN_LOSSES_BEFORE_PLAY+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Wait Wins</span><span class='bold coral card-button-num'>\"+WAIT_PLAY_AFTER_LOSSES+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Odds</span><span class='bold coral card-button-num'>\"+ODDS+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Increase</span><span class='bold coral card-button-num'>\"+INCR+\"%</span></div>\";\n    script_output += \"</div>\"; //card 2 left buttons close\n    script_output += \"</div>\"; //card 2 left close\n \n    script_output += \"<div id='card2-right' class='card-column' style='text-align: right'>\"; //card 2 right\n    script_output += \"<h5>Bets</h5>\";\n    script_output += \"<span>Min: <span class='bold lime'>\"+parseFloat(MIN_BET).toFixed(8)+\"</span></span>\";\n    script_output += \"<span>Base: <span class='bold lime'>\"+parseFloat(BAS_BET).toFixed(8)+\"</span></span>\";\n    script_output += \"<span>Max: <span class='bold lime'>\"+parseFloat(MAX_BET).toFixed(8)+\"</span></span>\";\n    script_output += \"<div id='accepted_consecutive_losts' class='card-button' style='margin: 1em 0 0 2em;'><span>=> Accepted Consecutive Losts: </span><span id='accepted_consecutive_losts_num' class='bold coral card-button-num'>\"+accepted_consecutive_losts+\"</span></div>\";\n \n    script_output += \"</div>\"; //card 2 right close\n \n    script_output += \"</div>\"; //card 2 column wrapper close\n    script_output += \"</div>\"; //card 2 close\n \n    // CARD 3\n    script_output += \"<div id='card3' class='card'>\"; // CARD 3\n    script_output += \"<div class='cards-column-wrapper'>\"; // card 3 column wrapper\n \n    script_output += \"<div class='card-column'>\"; //card 3 left\n    script_output += \"<div class='cards-column-wrapper'>\" // button wrapper\n    script_output += \"<div class='card-button'><span>Sessions</span><span class='bold coral card-button-num'>\"+tot_multiply_sessions+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Plays</span><span class='bold coral card-button-num'>\"+tot_multiply_play+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>Bets</span><span class='bold coral card-button-num'>\"+tot_multiply_bets+\"</span></div>\";\n    script_output += \"</div>\"; //card 3 left buttons close\n    script_output += \"</div>\"; //card 3 left close\n \n    script_output += \"<div class='card-column' style='text-align: right'>\"; //card 3 right\n    script_output += \"<h5>Estimated Winnings</h5>\";\n    script_output += \"<span>Session: <span class='bold lime' >\"+estimate_winnings_session+\"</span></span>\";\n    script_output += \"<span>Day: <span class='bold lime'>\"+estimate_winnings_day+\"</span></span>\";\n    script_output += \"<span class='mb1'>Month: <span class='bold lime'>\"+estimate_winnings_month+\"</span></span>\";\n    script_output += \"<h5>Max Consecutive Losts Always</h5>\";\n    script_output += \"<span>1st str: <span class='bold lime' >\"+max_consecutive_losts+\"</span></span>\";\n    script_output += \"<span>2nd str: <span class='bold lime'>\"+max_consecutive_losts_inplay+\"</span></span>\";\n    script_output += \"</div>\"; //card 3 right close\n \n    script_output += \"</div>\"; //card 3 column wrapper close\n    script_output += \"</div>\"; //card 3 close\n \n    // CARD 4\n    script_output += \"<div id='card4' class='card'>\";\n    script_output += \"<div class='cards-column-wrapper'>\" // 4 column wrapper\n    script_output += \"<div class='card-column' >\";\n    script_output += \"<h5>Max Consecutive Losts</h5>\";\n    script_output += \"<h5>Last Session</h5>\";\n    script_output += \"<div class='cards-column-wrapper'>\" // button wrapper\n    script_output += \"<div class='card-button'><span>1st str</span><span class='bold coral card-button-num'>\"+max_consecutive_losts_session+\"</span></div>\";\n    script_output += \"<div class='card-button'><span>2nd str</span><span class='bold coral card-button-num'>\"+max_consecutive_losts_inplay_session+\"</span></div>\";\n    script_output += \"</div>\"; //card 4 button wraper close\n    script_output += \"</div>\"; //card 4 column close\n    script_output += \"<div class='card-column' style='text-align: right'>\"; // column right\n    script_output += \"<h5>Last Session Stats</h5>\";\n    script_output += \"<span id='last_multiply_play_time' class='bold coral mb1'></span>\";\n    script_output += \"<span>Max Bet: <span class='bold lime'>\"+parseFloat(max_bet_session).toFixed(8)+\"</span></span>\";\n    script_output += \"<span>Balance: <span class='bold lime'>\"+parseFloat(curr_multiply_balance).toFixed(8)+\"</span></span>\";\n    script_output += \"</div>\"; //card 4 column close\n    script_output += \"</div>\"; //card 4 column wrapper close\n \n    script_output += \"<div class='card-column mt1' style='text-align: center'>\"; // central column\n    script_output += \"<h5>Messages (alfa)</h5>\";\n    script_output += \"<span id='ref_help_message' class='lime'>\";\n    script_output += \"<span id='ref_help_message1' class='bold'> Configuration is ok </span><br />\";\n    script_output += \"<span id='ref_help_message2' style='font-size:0.8em;'></span>\";\n    script_output += \"</span>\";\n    script_output += \"</div>\"; //card 4 column close\n    script_output += \"</div>\"; //card 4close\n \n    script_output += \"</div>\"; //card wrapper 4 cards close\n \n    script_output += \"<div class='cards-wrapper cards-wrapper-1col pt0 pb0'>\"; //card wrapper 1 card open\n    script_output += \"<div id='card4' class='card card-double-size'>\";\n    script_output += \"<canvas id='myChart_last_session'></canvas>\";\n    script_output += \"</div>\"; //card 3close\n    script_output += \"</div>\"; //card wrapper 1 cards close\n \n    script_output += \"<div class='cards-wrapper cards-wrapper-1col pt0'>\"; //card wrapper 1 card open\n    script_output += \"<div id='card5' class='card card-double-size'>\";\n    script_output += \"<canvas id='myChart_total'></canvas>\";\n    script_output += \"</div>\"; //card 3close\n    script_output += \"</div>\"; //card wrapper 1 cards close\n \n    script_output += \"</div>\"; //card wrapper close\n    script_output += \"</div>\"; //main div close\n \n    $('head').append(script_output_css);\n    $('#script_output').after(script_output);\n \n    // Colors and texts in cards\n    if (Boolean(MULTIPLY)) {\n        $('#ref_multiply_status').addClass('true').text('Enabled');\n    } else {\n        $('#ref_multiply_status').addClass('false').text('Disabled');\n        $('#script_referral').removeClass('colored').addClass('grayed');\n    }\n    if (Boolean(MULTIPLY_AT_NIGHT)) {\n        $('#ref_multiply_at_night').addClass('lime').text('Enabled');\n    } else {\n        $('#ref_multiply_status').addClass('false').text('Disabled');\n    }\n    if (SPEED == 0 ) {\n        $(\"#ref_multiply_speed\").text('really slow');\n    } else if (SPEED == 1 ) {\n        $(\"#ref_multiply_speed\").text('Human Simulation');\n    } else if (SPEED == 0 ) {\n        $(\"#ref_multiply_speed\").text('Medium');\n    } else if (SPEED == 0 ) {\n        $(\"#ref_multiply_speed\").text('Fast');\n    }\n \n    $(\"#ref_multiply_game_mode\").text('Manual sim');\n \n    if (STRATEGY == 0) {\n        $('#ref_multiply_game_type').text('Mart Classic (0)');\n    } else if (STRATEGY == 1) {\n        $('#ref_multiply_game_type').text('Mart After '+MIN_LOSSES_BEFORE_PLAY+' Losses');\n    } else if (STRATEGY == 2) {\n        $('#ref_multiply_game_type').text('Mart After '+MIN_LOSSES_BEFORE_PLAY+'+ Losses and '+WAIT_PLAY_AFTER_LOSSES+' win');\n    } else if (STRATEGY == 3) {\n        $('#ref_multiply_game_type').text('Mart After '+MIN_LOSSES_BEFORE_PLAY+'++ Losses and '+WAIT_PLAY_AFTER_LOSSES+' win');\n    }\n \n    // get accepte consecutive losts and set it\n    var accepted_consecutive_losts=0; stat_bet = BAS_BET;\n    while (stat_bet <= MAX_BET) {\n        stat_bet=stat_bet+(stat_bet*INCR/100);\n        accepted_consecutive_losts++;\n    }\n    $('#accepted_consecutive_losts_num').text(accepted_consecutive_losts-1);\n \n    // Begin Message Construction\n    var balance = parseFloat($('#balance').text()).toFixed(8);\n    var message1 = '';\n    var message2 = '';\n    var error_code = 0;\n    var oddsincrease = parseFloat(odds_increase(accepted_consecutive_losts-1)).toFixed(8);\n \n    if (MAX_BET > balance ) {\n        message1 = \"MAX BET is higher then Balance. Can't play.\";\n        message2 = \"Decrease MAX_BET\";\n        error_code = 3;\n    } else if (oddsincrease < 0) {\n        message1 = \"Odds and Increase param not good\";\n        message2 = \"Loosing Combination \"+oddsincrease+\" after \"+(accepted_consecutive_losts-1)+\" games\";\n        error_code = 3;\n    } else if (accepted_consecutive_losts < 5 && ODDS >= 2) {\n        message1 = \"Max accepted Consecutive lost param is low\";\n        message2 = \"Dec BAS_BET, Inc MAX_BET, Dec INCR\";\n        $('#accepted_consecutive_losts').addClass('bg-orange');\n        error_code = 2;\n    } else if (oddsincrease < BAS_BET) {\n        message1 = \"Odds and Increase param warning\";\n        message2 = \"You'll get \"+oddsincrease+\" after \"+(accepted_consecutive_losts-1)+\" games\";\n        error_code = 1;\n    } else if (accepted_consecutive_losts < 10 && ODDS >= 2) {\n        message1 = \"Max accepted Consecutive Lost param is risky\";\n        message2 = \"Dec BAS_BET, Inc MAX_BET, Dec INCR\";\n        $('#accepted_consecutive_losts').addClass('bg-yellow');\n        error_code = 1;\n    } else if (MULTIPLY_WAIT_HOURS <= 5) {\n        message1 = \"Play mult too often is risky\";\n        message2 = \"Increase MULTIPLY_WAIT_HOURS\";\n        $('#hours_beetween_multiply').addClass('bg-yellow');\n        error_code = 1;\n    }\n \n    if (MULTIPLY_WAIT_HOURS <= 1 && error_code <= 2) {\n        message1 = \"If you play multiply every hour you will lose\";\n        message2 = \"Increase MULTIPLY_WAIT_HOURS at 6+\";\n        $('#hours_beetween_multiply').addClass('bg-orange');\n        $('#hours_beetween_multiply .coral').removeClass('coral');\n        error_code = 2;\n    }\n \n    if (error_code > 0) {\n        $('#ref_help_message1').text(message1);\n        $('#ref_help_message2').html(message2);\n    }\n    if (error_code == 4) $('#ref_help_message').removeClass('lime').addClass('false');\n    else if (error_code == 3) $('#ref_help_message').removeClass('lime').addClass('coral');\n    else if (error_code == 2) $('#ref_help_message').removeClass('lime').addClass('orange');\n    else if (error_code == 1) $('#ref_help_message').removeClass('lime').addClass('yellow');\n \n    //find last time multiply in hh:mm\n    var [{ value: month },,{ value: day },,{ value: year },,{ value: hour },,{ value: minute }] = dateTimeFormat .formatToParts(last_multiply);\n    //console.log(\"last multiply session: \"+year+\"/\"+month+\"/\"+day+\" \"+hour+\":\"+minute);\n    $('#last_multiply_play_time').text(month+\" \"+day+\", \"+hour+\":\"+minute);\n \n}\n \nfunction odds_increase (accepted_consecutive_losts) {\n    var win = 0; var winlessspent; var spent = 0;\n    var nbet = BAS_BET; var nwin;\n \n    for (i=1; i<=accepted_consecutive_losts; i++){\n        spent += nbet;\n        win = nbet + (nbet * (ODDS - 1));\n        winlessspent = win - spent;\n        //console.log(\"--bet:\"+nbet.toFixed(8)+\",spent:\"+spent.toFixed(8)+\",win:\"+win.toFixed(8)+\",diff:\"+winlessspent.toFixed(8));\n        nbet = nbet + (nbet * (INCR / 100));\n        nwin = nbet + (nbet * (ODDS - 1));\n    }\n    return winlessspent;\n}\n \nfunction graphs_init () {\n    var ctx = document.getElementById('myChart_last_session').getContext('2d');\n    var chart = new Chart(ctx, {\n        // The type of chart we want to create\n        type: 'line',\n \n        // The data for our dataset\n        data: {\n            labels: last_session_hist,\n            datasets: [{\n                label: 'Last Session Multiplpy Balance',\n                backgroundColor: 'rgb(255, 127, 80)',\n                borderColor: 'rgb(255, 127, 80)',\n                data: last_session_hist,\n                pointRadius: 2\n            }]\n        },\n \n        // Configuration options go here\n        options: {\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'rgb(255, 127, 80)',\n                    fontSize: 11\n                }\n            },\n            aspectRatio: 5,\n            scales:{\n                xAxes: [{\n                    display: false //this will remove all the x-axis grid lines\n                }],\n                yAxes: [{\n                    ticks: {\n                        display: false\n                    }\n                }]\n            }\n        }\n    });\n \n    var ctx1 = document.getElementById('myChart_total').getContext('2d');\n    var chart = new Chart(ctx1, {\n        // The type of chart we want to create\n        type: 'line',\n \n        // The data for our dataset\n        data: {\n            labels: multiply_hist,\n            datasets: [{\n                label: 'Total Balance in Multiply',\n                backgroundColor: 'rgb(0, 255, 0)',\n                borderColor: 'rgb(0, 255, 0)',\n                data: multiply_hist,\n                pointRadius: 3\n            }]\n        },\n \n        // Configuration options go here\n        options: {\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'rgb(0, 255, 0)',\n                    fontSize: 11\n                }\n            },\n            aspectRatio: 5,\n            scales:{\n                xAxes: [{\n                    display: false //this will remove all the x-axis grid lines\n                }],\n                yAxes: [{\n                    ticks: {\n                        display: false\n                    }\n                }]\n            }\n        }\n    });\n}\n \n///// END SECONDARY PANEL\n \n \nfunction panelInit () {\n    var script_output_css, script_output_33;\n    if (LOGGING > 4) console.log(\"%c[Debug] Function panelInit begin\", 'color:grey');\n    // Create the Div on the page\n    // Version 3.3\n    script_output_css =  \"<style>\";\n    script_output_css += \".script-output {font-size: 9px; line-height:10px; background: #333; border: 2px groove #09ff00; margin-bottom: 1em;}\";\n    script_output_css += \".script-output h1 {color: lime; font-size:1.8em; font-weight:bold; }\"\n    script_output_css += \".script-output h4 {color: lime; font-size:1.2em; font-weight:bold; text-align: center; margin-bottom:0;}\"\n    script_output_css += \".cards-wrapper { display: grid; grid-gap: 0.5rem; grid-template-columns: 1fr 1fr; padding: 0.5rem 0rem; margin: 0 auto; width: auto }\";\n    script_output_css += \".cards-wrapper-2-1 { grid-template-columns: 2fr 1fr; }\";\n    script_output_css += \".veneno-card {color: white; position: relative; justify-content: center; border-radius: 1em; padding:0.8em 1em; display: flex; flex-direction: column; background-color:#000; box-shadow: 0 0 5em -1em black; border: 1px solid #00ff00d9; text-decoration: none; text-align: left;}\";\n    script_output_css += \".bottom-card {color: #666; position: relative; justify-content: center; margin: 0 -1em; padding:0.8em 1em; display: flex; background-color:#1d1d1d; text-decoration: none; text-align: left;}\";\n    script_output_css += \".script-output a {color: #444;}\";\n    script_output_css += \".script-output a:hover {color: lime;}\";\n    script_output_css += \".horizontal-grid-wrapper-5 {display: grid; grid-gap: 0.5rem; grid-template-columns: 1fr 1fr 1fr 1fr 1fr; width: auto ; margin: 0 auto;}\";\n    script_output_css += \".horizontal-grid-wrapper-4 {display: grid; grid-gap: 0.2rem; grid-template-columns: 1fr 1fr 1fr 1fr; width: max-content; margin: 0 auto;}\";\n    script_output_css += \".horizontal-grid-wrapper-3 {display: grid; grid-gap: 0.2rem; grid-template-columns: 1fr 1fr 1fr; width: max-content; margin: 0 auto;}\";\n    script_output_css += \".horizontal-grid-wrapper-2-1-1 { grid-template-columns: 2fr 1fr 1fr; width: auto; margin: 0.7em -1em 0 -1em;}\";\n \n    script_output_css += \".card-button {border: 1px solid grey; overflow: hidden; padding: 0.3em; background-color: beige; color: black; border-radius:10px; display: flex; flex-direction: column; text-align: center; }\";\n    script_output_css += \".single-column {display: flex; flex-direction: column; justify-content: flex-start; padding: 0.3em;}\";\n \n    script_output_css += \".card-button:hover { background-color: #efefef;}\";\n    script_output_css += \".card-button-bottom {font-size: 1.4em; margin-top:0.2em;}\";\n \n    script_output_css += \".script-output .br {border-right: 1px dashed white;}\";\n    script_output_css += \".script-output .br-grey {border-right: 1px dashed #666;}\";\n    script_output_css += \".script-output .mt1 {margin-top: 1em;}\";\n    script_output_css += \".script-output .mb1 {margin-bottom: 1em;}\";\n    script_output_css += \".script-output .ml1 {margin-left: 1em;}\";\n    script_output_css += \".script-output .mb0 {margin-bottom: 0;}\";\n    script_output_css += \".script-output .mt0 {margin-top: 0;}\";\n    script_output_css += \".script-output .pr1 {padding-right: 1em;}\";\n    script_output_css += \".script-output .pt0 {padding-top: 0;}\";\n    script_output_css += \".script-output .pb0 {padding-bottom: 0;}\";\n    script_output_css += \".script-output .ta-r {text-align:right;}\";\n    script_output_css += \".script-output .ta-c {text-align:center;}\";\n \n    script_output_css += \".script-output .lime, .veneno-card .true {color: lime}\";\n    script_output_css += \".script-output .orange {color: orange}\";\n    script_output_css += \".script-output .false {color: #ff3407 }\";\n    script_output_css += \".script-output .coral {color: coral}\";\n \n    script_output_css += \".script-output .card-button {color: white; text-shadow: 1px 1px 4px black; font-size: 0.9em; font-weight: bold;  border: none;  border-radius:5px}\";\n    script_output_css += \".card-button.true {background-color: #2ecc71; box-shadow: 0px 2px 0px 0px #0b311b;}\";\n    script_output_css += \".card-button.false {background-color: #e74c3c; box-shadow: 0px 2px 0px 0px #48120c;}\";\n \n    script_output_css += \".script-output .monospace {font-family: monospace}\";\n    script_output_css += \".script-output .emoji {font-family: emoji}\";\n \n    script_output_css += \" @media screen and (max-width: 900px) { .cards-wrapper { width: max-content; grid-template-columns: 1fr; } } \";\n    script_output_css += \" @media screen and (max-width: 500px) { .veneno-card {max-width: calc(100vw - 4rem); } } \";\n \n    script_output_css += \"</style>\";\n \n    script_output_33 =  '<div class=\"center free_play_bonus_box_large script-output\" id=\"script_output\">';\n    if (referrer.length > 0) {\n        script_output_33 += '<h1 class=\"mb0\">AutoRoll Status rev. '+script_version+'</h1>';\n    } else {\n        script_output_33 += '<h1 class=\"mb0\">AutoRoll Status ver. '+script_version+'</h1>';\n    }\n    script_output_33 += '<div class=\"cards-wrapper cards-wrapper-2-1\">';\n    script_output_33 += '<div class=\"veneno-card\">';\n    script_output_33 += '<div class=\"horizontal-grid-wrapper-5\">';\n    script_output_33 += '<div class=\"card-button '+Boolean(ROLL)+'\"><span class=\"card-button-top\">ROLL</span><span class=\"card-button-bottom bold\">'+Boolean(ROLL)+'</span></div> ';\n    script_output_33 += '<div class=\"card-button '+Boolean(MULTIPLY)+'\"><span class=\"card-button-top\">MULTIPLY</span><span class=\"card-button-bottom bold\">'+Boolean(MULTIPLY)+'</span></div> ';\n    script_output_33 += '<div class=\"card-button '+Boolean(BONUS_WOF)+'\"><span class=\"card-button-top\">BONUS WOF</span><span class=\"card-button-bottom bold\">'+Boolean(BONUS_WOF)+'</span></div> ';\n    script_output_33 += '<div class=\"card-button '+Boolean(BONUS1000)+'\"><span class=\"card-button-top\">BONUS 1000</span><span class=\"card-button-bottom bold\">'+Boolean(BONUS1000)+'</span></div> ';\n    script_output_33 += '<div class=\"card-button '+Boolean(LOTTERY)+'\"><span class=\"card-button-top\">LOTTERY</span><span class=\"card-button-bottom bold\">'+Boolean(LOTTERY)+'</span></div> ';\n    script_output_33 += '</div>'; // close left first line\n    script_output_33 += '<div class=\"horizontal-grid-wrapper-3 mt1\"  style=\"width: 100%;\">';\n    script_output_33 += '<div class=\"single-column\">';\n    script_output_33 += '   <h4>Wins</h4> ';\n    script_output_33 += '   <div class=\"single-column br\">';\n    script_output_33 += '       <span>Btc: <span class=\"lime bold\">'+tot_btc_winning_rolling+'</span></span>';\n    script_output_33 += '       <span>RP: <span class=\"lime bold\">'+tot_rp_winning_rolling+'</span></span>';\n    script_output_33 += '       <span>Lottery: <span class=\"lime bold\">'+tot_lottery_winning_rolling+'</span></span>';\n    script_output_33 += '   </div>';\n    script_output_33 += '</div>'; // column\n    script_output_33 += '<div class=\"single-column\">';\n    script_output_33 += '   <h4 class=\"coral\">Spent</h4> ';\n    script_output_33 += '   <div class=\"single-column br\">';\n    script_output_33 += '       <span>RP Bonus: <span class=\"coral bold\">'+tot_rp_spent_rewards+'</span></span> ';\n    script_output_33 += '       <span>RP Captcha: <span class=\"coral bold\">'+tot_rp_spent_captcha+'</span></span> ';\n    script_output_33 += '       <span>Btc Lottery: <span class=\"coral bold\">'+tot_lottery_tickets+'</span></span>';\n    //script_output_33 += '       <span>&nbsp</span>';\n    script_output_33 += '   </div>';\n    script_output_33 += '</div>'; // column\n    script_output_33 += '<div class=\"single-column\">';\n    script_output_33 += '   <h4>Multiply</h4> ';\n    script_output_33 += '   <div class=\"single-column\">';\n    script_output_33 += '       <span>Balance: <span class=\"lime bold\">'+tot_multiply_balance+'</span></span> ';\n    script_output_33 += '       <span>Bets: <span class=\"lime bold\">'+tot_multiply_bets+'</span></span> ';\n    script_output_33 += '       <span>Sessions: <span class=\"lime bold\">'+tot_multiply_games+'</span></span> ';\n    script_output_33 += '   </div>';\n    script_output_33 += '</div>'; // column\n    script_output_33 += '</div>'; // close left second line\n    script_output_33 += '<div class=\"ta-c cards-wrapper monospace\"  style=\"width: 100%;\">';\n    script_output_33 += '   <span>btc: <span id=\"usdxbtc\" class=\"lime bold\"></span> usd</span>';\n    script_output_33 += '   <span>usd: <span id=\"satxusd\" class=\"lime bold\"></span> sat</span>';\n    script_output_33 += '</div>'; // close left third line\n    script_output_33 += '</div>'; // close left\n    script_output_33 += '<div class=\"veneno-card\">';\n    script_output_33 += ' <div class=\"single-column pr1 ta-r monospace\">';\n    script_output_33 += '  <span>Exec: <span class=\"lime bold\"># '+tot_exec+'</span></span> ';\n    script_output_33 += '  <span>Ads Closed: <span class=\"true bold\" id=\"script_output_title_ads_closed_num\">0</span></span>';\n    script_output_33 += '  <span>Bonus: <span id=\"script_output_title_bonus_wait_hours\" class=\"true bold\">Wait</span></span>';\n    script_output_33 += '  <span>Multiply: <span id=\"script_output_title_multiply_wait_hours\" class=\"true bold\">Wait</span></span>';\n    script_output_33 += '  <span id=\"multiply_strategy\">Multiply Game System: <span class=\"true bold\">'+STRATEGY+'</span></span>';\n    script_output_33 += '  <span>Roll Mode: <span id=\"script_output_title_msg_mode\" class=\"true bold\">Wait</span></span>';\n    script_output_33 += '  <span id=\"script_output_title_msg_roll\" class=\"orange bold mt1\">Wait</span>';\n    if (Boolean(SHOW_RESET_STATS)) {\n        script_output_33 += '  <a id=\"script_output_reset_all_stats\" class=\"mt1\">Reset All Stats</a>';\n    }\n    script_output_33 += ' </div>';\n    script_output_33 += '</div>'; // close right\n \n    script_output_33 += '</div>'; // close cards wrapper\n    script_output_33 += '<div class=\"bottom-card monospace horizontal-grid-wrapper-3 horizontal-grid-wrapper-2-1-1 \">';\n \n    script_output_33 += ' <div class=\"single-column br-grey\">';\n    script_output_33 += '  <span>Donations are welcome</span> <span>BTC addr: 3FwAazZDEuy3ER4NQVp4Yqo6kDxCFntwS8 </span>';\n    script_output_33 += ' </div>';\n \n    script_output_33 += ' <div class=\"single-column br-grey ml1\">';\n    script_output_33 += '  <a href=\"https://bit.ly/2JsP12I\" target=\"_blank\">Config HowTo</a>';\n    script_output_33 += '  <a href=\"https://greasyfork.org/en/scripts/404112-freebitco-in-auto-roll-no-captcha-status-console-advanced-human-behavior-all-bonuses/feedback\" target=\"_blank\"> Rate</a>';\n    script_output_33 += ' </div>';\n \n    script_output_33 += ' <div class=\"single-column ta-r\" >';\n    script_output_33 += '  <span><span class=\"emoji\">© </span>daniele-veneno</span><span>2018 2021</span>';\n    script_output_33 += ' </div>';\n \n    script_output_33 += '</div>';\n    script_output_33 += '</div>'; // close script_output\n \n \n    // Write on page\n    $('head').append(script_output_css);\n    $('#reward_points_bonuses_main_div').prepend(script_output_33);\n}\n \nfunction multiplyPanelInit(){\n    let out=\"\";\n    out += \"<div class='script-output' style='width:80%; margin: 0 auto; margin-bottom: 1em'>\"\n    out += \"    <div class='veneno-card' style='margin: 1em; border: none; background: #00000033;'>\";\n    out += \"        <p>Test your multiply configuration on \";\n    out += \"            <a class='coral' target='_blank' href='https://www.bitso.me/hi-lo-calc.php'>Advanced Martingale Calculator</a>\";\n    out += \"        </p>\";\n    out += \"    <div>\";\n    out += \"<div>\";\n    if (SHOW_TEST_MULT_CONF) $('#double_your_btc').prepend(out);\n}\nfunction rewards(after_refresh) {\n    if (LOGGING > 4) console.log(\"%c[RPBonuses] [Debug] Function rewards begin\", 'color:grey');\n    var bonus_missing_time = {};\n    var t = missingTime();\n    var d = new Date();\n    var min_missing_min = 5;\n    var milli_between_bonuses = HOURS_BETWEEN_BUY_BONUS*60*60*1000;\n \n    reward_points = parseInt($('.user_reward_points').text().replace(',',\"\"));\n \n    // Create a RP History\n    if (after_refresh) {\n        rp_hist_arr.push(reward_points);\n        setCookie (\"rp_hist_arr\", JSON.stringify(rp_hist_arr), 31);\n        // Debug for RP history check\n        if (LOGGING > 4) console.log(\"%c[RPBonuses] [Debug] rp_hist: \" +rp_hist_arr, 'color:grey');\n    }\n \n \n    if ($(\"#bonus_container_free_points\").length != 0) {\n        // Some promo is already active\n        bonus_missing_time.text = $('#bonus_span_free_points').text();\n        bonus_missing_time.hour = parseInt(bonus_missing_time.text.split(\":\")[0]);\n        bonus_missing_time.min = parseInt(bonus_missing_time.text.split(\":\")[1]);\n \n        if (LOGGING > 3) console.log(\"[RPBonuses] Promo RP is %c active %c for \"+bonus_missing_time.hour+\":\"+bonus_missing_time.min, 'color: purple', css_reset);\n \n        setCookie(\"last_bonus\", d.getTime(), 365);\n        isBonusActive = true;\n \n        if(Boolean(PROMO_MODE)) $(\"#script_output_title_msg_mode\").text(\"Promo\");\n        $('#script_output_title_bonus_wait_hours').text('Active '+bonus_missing_time.hour+'h '+bonus_missing_time.min+\"m\").addClass('bold');\n \n    } else {\n        // No promos active\n        var last_bonus_diff = Math.floor(d.getTime() - last_bonus);\n        //if (LOGGING > 4) console.log(\"%c[RPBonuses] [Debug] lastBonus diff: \"+last_bonus_diff+\" -- last_bonus: \"+last_bonus+\" -- now: \"+d.getTime()+\" var setted: \"+milli_between_bonuses, 'color:grey');\n \n        //If disabled not buying\n        if (! Boolean(BONUS_WOF)) {\n            if (LOGGING > 3) console.log('[RPBonuses] Not buying WOF Bonuses. Not Active by config');\n            $('#script_output_title_bonus_wait_hours').text('Disabled').removeClass('true').addClass('false');\n            return false;\n        } // or if missing time not satisfied\n        if ( last_bonus_diff < milli_between_bonuses ) {\n            var min_between_bonuses = Math.floor((milli_between_bonuses-last_bonus_diff)/1000/60);\n            var hours_between_bonuses = Math.floor(min_between_bonuses/60);\n            if (LOGGING > 3) console.log('[RPBonuses] Not buying RPBonuses. Wait HOURS_BETWEEN_BUY_BONUS before buy again, missing: '+hours_between_bonuses+'h '+min_between_bonuses%60+'m');\n            $('#script_output_title_bonus_wait_hours').text('Wait '+hours_between_bonuses+\"h \"+min_between_bonuses%60+\"m\").removeClass('true').addClass('false');\n            return false;\n        } // or if missing time on roll error\n        if (t[0] < 0){\n            if (LOGGING > 3) console.log('[RPBonuses] Error getting missing time less then 0, that was'+t[0]+\":\"+t[1]);\n            $('#script_output_title_bonus_wait_hours').text('E0001').removeClass('true').addClass('false');\n            return false;\n        } // or before missing 10-20 minutes\n        if ( t[0] >= min_missing_min ) {\n            if (LOGGING > 3) console.log('[RPBonuses] Not buying RPBonuses. Wait '+Math.floor(t[0]-min_missing_min)+' minutes to buy near roll');\n            $('#script_output_title_bonus_wait_hours').text('Wait '+Math.floor(t[0]-min_missing_min)+' m');\n            return false;\n        }\n \n        // Buy WOF Bonus\n        $('.rewards_link').not('.hide_menu').click();\n        tot_rp_spent_rewards = parseInt(tot_rp_spent_rewards);\n        if (LOGGING > 4) console.log(\"[RPBonuses] Tot rp spent in Bonuses before: \"+tot_rp_spent_rewards);\n        setTimeout(function() {\n \n            if (reward_points < 900) {\n                if (LOGGING > 2) console.log(\"[RPBonuses] No enough points to buy bonus. Less then 12. Waiting for points in next rolls\");\n            } else if (reward_points < 1800) {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 1 WOF\");\n                RedeemRPProduct('free_wof_1');\n                tot_rp_spent_rewards+=900;\n            } else if (reward_points < 2700) {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 2 WOF\");\n                RedeemRPProduct('free_wof_2');\n                tot_rp_spent_rewards+=1800;\n            } else if (reward_points < 3600) {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 3 WOF\");\n                RedeemRPProduct('free_wof_3');\n                tot_rp_spent_rewards+=2700;\n            } else if (reward_points < 4500) {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 4 WOF\");\n                RedeemRPProduct('free_wof_4');\n                tot_rp_spent_rewards+=3600;\n            } else {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 5 WOF\");\n                RedeemRPProduct('free_wof_5');\n                tot_rp_spent_rewards+=4500;\n            }\n \n            if (reward_points >= 4800 && Boolean(BONUS1000) ) {\n                if (LOGGING > 1) console.log(\"[RPBonuses] buying bonus 1000% roll - not convenient anymore\");\n                setTimeout(function(){ RedeemRPProduct('fp_bonus_1000')},random(5000,10000));\n                tot_rp_spent_rewards+=3200;\n            }\n \n            $(\"#script_output_title_msg_mode\").text(\"Promo\");\n \n            setTimeout(function(){\n                setCookie(\"tot_rp_spent_rewards\",tot_rp_spent_rewards,7);\n                if (LOGGING > 4) console.log(\"[RPBonuses] Tot rp spent in Bonuses after: \"+tot_rp_spent_rewards);\n                $('.free_play_link').not('.hide_menu').click();\n            }, random(10000,20000));\n \n        } ,random(2000,16000));\n    }\n}\n \nfunction Roll() {\n    if (LOGGING > 4) console.log(\"%c[Roll] [Debug] Function Roll begin\", 'color:grey');\n    var d = new Date();\n    var h = d.getHours();\n    var t = missingTime();\n \n    if (!Boolean(ROLL)) {\n        $(\"#script_output_title_msg_mode\").text(\"Disabled\").removeClass('true').addClass('false');\n        return true;\n    }\n \n    rollTryCount++;\n    if ($('#free_play_form_button').is(':visible') && ! $('#play_without_captchas_button').is(':visible')) {\n        r=random(1,100);\n        if ( isNight() && Boolean(NIGHT_MODE) ) {\n            if (r <= 30) rand=random(2400000,7200000);\n            else rand=random(1000000,3600000);\n            rolling_mode=\"Night\";\n        } else {\n            if (r <= 10)        rand=random(9000,7200000); // xx%, long wait, more than hour\n            else if (r <= 30)   rand=random(6000,1800000); // long but not longest\n            else if (r <= 71)   rand=random(3000,1200000); // xx% cases medium\n            else                rand=random(500,60000); // xx% cases fast roll\n            rolling_mode=\"Day\";\n        }\n \n        if (Boolean(SLOW_MODE)) {\n            if (r <= 5)        rand=random(3000,100000);\n            else if (r <= 20)   rand=random(300000,1500000);\n            else if (r <= 40)   rand=random(60000,2000000);\n            else                rand=random(120000,3000000);\n            rolling_mode=\"Slow\";\n        }\n \n        if (Boolean(isBonusActive) && Boolean(PROMO_MODE) ) { //If promo is active, roll faster\n            if (r <= 5)        rand=random(9000,3600000);\n            else if (r <= 20)   rand=random(6000,1500000);\n            else if (r <= 40)   rand=random(3000,1000000);\n            else                rand=random(500,240000);\n            rolling_mode=\"Promo\";\n        } else if ( isNight() && Boolean(GHOST_MODE)) {\n            // console.log(\"Ghost mode is active, don't free roll in the night\");\n            $(\"#script_output_title_msg_mode\").text('Ghost');\n \n            var waiting_milli;\n            if (stopNight > h) {\n                waiting_milli = (stopNight - h + 1)*60*60*1000;\n            } else {\n                waiting_milli = (stopNight + (24 - h + 1))*60*60*1000;\n            }\n            if (waiting_milli > 14400000) waiting_milli = random(14400000,16000000);\n            rand=random(waiting_milli, (waiting_milli + 3600000));\n            //Regresh every 4/6 hours max to update refers\n \n            if (LOGGING > 2) console.log(\"%c[Roll] Ghost Mode, Refresh page in rand \"+rand/1000+\" s\", 'color: grey');\n            setTimeout(function(){\n                location.reload();\n            }, rand );\n \n            return true;\n        }\n \n        if (tot_btc_winning_rolling == 0) {\n            rand=random(1000,2000);\n            if (LOGGING > 2) console.log('>>>>> First Execution, fast ROLL');\n        }\n        $(\"#script_output_title_msg_mode\").text(rolling_mode);\n        //rand = rand(1000,2000);\n \n \n        // Real ROLL Function\n        rollAndRetrieve(rand);\n \n \n    } else if ($('#play_without_captchas_button').is(':visible') ){\n        if (Boolean(PLAY_WITHOUT_CAPTCHA)) {\n            //Try to play without captcha, if enough RP\n            if (LOGGING > 2) console.log (\"[Roll] Captcha Roll\");\n            captchaRoll();\n        } else {\n            return false;\n        }\n    } else if (rollTryCount >= 10) {\n        // refresh page after 10 minutes trying the next case\n        location.reload();\n    } else if (t[0] <= 0) {\n        // Not in the home page window, try again in a bit\n        $('#script_output_title_msg_roll').html('<span class=\"bold\">Waiting 1m</span>');\n        if (LOGGING > 2) console.log(\"[Roll] Retry in 1m\");\n        setTimeout(function(){\n            Roll();\n        }, 60000 );\n    } else {\n        $('#script_output_title_msg_roll').html('<span class=\"bold\">Waiting Next Roll</span>');\n        //$(\"#script_output_title_msg_mode\").text(\"Wait\");\n        if (LOGGING > 2) console.log(\"[Roll] No roll\");\n    }\n}\n \nfunction captchaRoll() {\n    if (LOGGING > 4) console.log(\"%c[Roll] [Debug] Function captchaRoll begin\", 'color:grey');\n    $('#play_without_captchas_button').click();\n    setTimeout(function(){\n        var cost_rp = $('.play_without_captcha_description span').text();\n        if (LOGGING > 2) console.log (\"%c[Roll] Try to play without captcha for \"+cost_rp+\" RP points. You have \"+reward_points+\" RP.\", 'color:purple;');\n        if (reward_points >= cost_rp ) {\n            // ROLL anyway paying\n            if (LOGGING > 2) console.log (\"[Roll] Roll with Captcha\");\n            $('#script_output_title_msg_roll').html('<span class=\"bold true\">Captcha OK</span>');\n \n            r=random(1,100);\n            if (r <= 10)        rand=random(9000,7200000); // xx%, long wait, more than hour\n            else if (r <= 30)   rand=random(6000,1800000); // long but not longest\n            else if (r <= 71)   rand=random(3000,1200000); // xx% cases medium\n            else                rand=random(500,60000); // xx% cases fast roll\n            rolling_mode=\"Captcha\";\n            $(\"#script_output_title_msg_mode\").text(rolling_mode);\n \n            if (tot_btc_winning_rolling == 0) {\n                rand=random(1000,2000);\n                if (LOGGING > 2) console.log('>>>>> First Execution, fast ROLL');\n            }\n            rand = random(500,60000);\n            rollAndRetrieve(rand);\n            tot_rp_spent_captcha = Math.floor (parseInt(tot_rp_spent_captcha)+parseInt(cost_rp));\n            setCookie(\"tot_rp_spent_captcha\", tot_rp_spent_captcha, 7);\n        } else {\n            if (LOGGING > 2) console.log (\"%c[Roll] Not enough RP. No Roll\", 'color: red');\n            $('#script_output_title_msg_roll').html('<span class=\"bold false\">Miss RP</span>'); // Status on page\n        }\n    }, random(1000,3000));\n}\n \nfunction rollAndRetrieve (rand) {\n    if (LOGGING > 4) console.log(\"%c[Roll] [Debug] Function rollAndRetrieve begin\", 'color:grey');\n    var d = new Date();\n    var h = d.getHours();\n    // Show hour when will roll in status panel\n    // new date to modify various time during function\n    var d1 = new Date();\n    d1.setSeconds(d.getSeconds() + rand/1000);\n    var [{ value: year },,{ value: month },,{ value: day },,{ value: hour },,{ value: minute }] = dateTimeFormat.formatToParts(d1);\n    $('#script_output_title_msg_roll').html('<span class=\"bold\">Roll at <span class=\"false\">'+hour+':'+minute+'</span></span>');\n    if (LOGGING > 2) console.log('%c[Roll] ---Will roll in '+rand/1000/60+' minutes','color:green');\n \n    setTimeout(function(){\n        //Duplicate the visibility chek to avoid error when humans roll and don't refresh.\n        if ( $('#free_play_form_button').is(':visible') ){\n            $('body').focus();\n \n            //Update Status on page\n            $('#script_output_title_msg_roll').html('<span class=\"true\">++ Rolling NOW!</span>'); // Status on page\n            if (LOGGING > 2) console.log('%c+++ROLL!','color:purple; font-weight: bold');\n \n            // Execute the roll!!\n            setTimeout(function(){ $('#free_play_form_button').click(); }, 500);\n            setTimeout(function(){\n                // get some errors and log those :(\n                if ( $('#free_play_error').html().length > 0 ) {\n                    if (LOGGING > 1) console.log(\"%c[Roll] Some error occurred in Roll: \"+$('#free_play_error').html() );\n                    return false;\n                } else {\n                    var win_btc = $('#winnings').text();\n                    var win_lottery = $('#fp_lottery_tickets_won').text();\n                    var win_rp = $('#fp_reward_points_won').text();\n                    executions++;\n                }\n \n                // close tedious popup now\n                closePopupInterval($('.close-reveal-modal'));\n \n                //Update Status on page\n                $('#script_output_title_msg_roll').html('<span class=\"true\">++ Rolled</span>'); // Status on page\n                $('#script_output_title_executions_num').text(executions);\n                setCookie('executions', executions, 7);\n                if (LOGGING > 2) console.log('%c[Roll] Execution number: '+executions,'font-weight:bold; color:green');\n                if (LOGGING > 2) console.log('%c[Roll] Got '+win_btc+' btc, '+win_lottery+' tickets and '+win_rp+' RP!','font-weight:bold; color:green');\n                if (win_btc > 0) {\n                    tot_btc_winning_rolling = parseFloat(parseFloat(tot_btc_winning_rolling) + parseFloat(win_btc)).toFixed(8);\n                    setCookie('tot_btc_winning_rolling', tot_btc_winning_rolling, 7);\n                    if (LOGGING > 2) console.log('%c[Roll] BTC Won totally with script %c'+tot_btc_winning_rolling,'color: gray', 'font-weight:bold');\n                } else {\n                    if (LOGGING > 1) console.log('%c[Roll] Some error retrieving Roll Winnings. Winning btc was: '+win_btc, 'color: red');\n                }\n                if (win_lottery > 0) {\n                    tot_lottery_winning_rolling = parseFloat(parseFloat(tot_lottery_winning_rolling) + parseFloat(win_lottery)).toFixed(0);\n                    setCookie('tot_lottery_winning_rolling', tot_lottery_winning_rolling, 7);\n                    if (LOGGING > 2) console.log('%c[Roll] Tickets Won with script %c'+tot_lottery_winning_rolling,'color: gray', 'font-weight:bold');\n                } else {\n                    if (LOGGING > 1) console.log('%c[Roll] Some error retrieving Roll Winnings. Winning lottery was: '+win_btc, 'color: red');\n                }\n                if (win_rp > 0) {\n                    tot_rp_winning_rolling = parseFloat(parseFloat(tot_rp_winning_rolling) + parseFloat(win_rp)).toFixed(0);\n                    setCookie('tot_rp_winning_rolling', tot_rp_winning_rolling, 7);\n                    if (LOGGING > 2) console.log('%c[Roll] RP Won with script %c'+tot_rp_winning_rolling,'color: gray', 'font-weight:bold');\n                } else {\n                    if (LOGGING > 1) console.log('%c[Roll] Error retrieving Roll Winnings. Winning RP was: '+win_btc, 'color: red');\n                }\n            }, 6999);\n        } else {\n            if (LOGGING > 3) console.log('[Roll] Already Rolled maybe by some human..');\n            //Update Status on page\n            $('#script_output_title_msg_roll').html('<span class=\"false\">Already Rolled</span>'); // Status on page\n            setTimeout(function(){ location.reload(); }, 30000);\n        }\n    },rand);\n \n    //Random Action After ROLL\n    var rand1=rand+random(1000,600000);\n    rand=random(0,100);\n \n    if (rand > ROLL_P) {\n        if (LOGGING > 2) console.log('[Roll] [Debug] Reload page after roll in '+rand1/1000/60+' minutes!');\n        setTimeout(function(){ location.reload(); }, rand1);\n    } else if (rand <= ROLL_P && Boolean(MULTIPLY) && Boolean(isMultiplyPlayable)) {\n        // Show hour when will multiply in status panel\n        d1.setSeconds(d.getSeconds() + rand1/1000);\n        [{ value: year },,{ value: month },,{ value: day },,{ value: hour },,{ value: minute }] = dateTimeFormat.formatToParts(d1);\n        if (LOGGING > 0) console.log('[Roll] ---Will multiply in '+rand1/1000/60+' minutes!');\n        $('#script_output_multiply_status').html('<span class=\"bold\">Multiply at: <span class=\"false\">'+hour+':'+minute+'</span></span>');\n        setTimeout(function(){ multiply(true, false); }, rand1);\n    } else {\n        if (LOGGING > 2) console.log('[Roll] No action after roll. Rand was '+rand);\n    }\n}\n \nfunction lottery () {\n    //Plan buying lottery ticket\n    if(Boolean(LOTTERY)){\n        if (LOGGING > 4) console.log(\"%c[Lottery] [Debug] Function lottery begin\", 'color:gray');\n        var r = random(1,100);\n        var d = new Date();\n        var h = d.getHours();\n        var satbalance = parseInt($('#balance').text().split(\".\")[1]);\n        var randl = random(1,LOTTERY_MAX_TICKETS).toFixed(0); //Tickets to buy\n        if ( isNight() ) return true;\n        else if (satbalance <= randl) return true;\n        else if (r>= LOTTERY_P) return true;\n        if (LOGGING > 2) console.log(\"[Lottery] Buy %c\"+ randl + \" lottery tickets %cin some time....\", 'color:yellow', 'color:reset');\n        setTimeout(function(){\n            $('#lottery_tickets_purchase_count').val(randl);\n            setTimeout(function(){\n                $('#purchase_lottery_tickets_button').click();\n                if (LOGGING > 2) console.log(\"%c[Lottery] Bought \"+ randl + \" lottery tickets\", 'color:yellow');\n                tot_lottery_tickets = Math.floor(parseInt(tot_lottery_tickets) + parseInt(randl));\n                setCookie('tot_lottery_tickets',tot_lottery_tickets,7);\n            }, random(2000,4000));\n        }, random(40000,120000));\n    }\n}\n \n// Multiply, called after the free roll, sometimes.\n// ******** MULTIPLY GAME LOGIC START *********\n// Pre start and selector\nfunction multiply(after_roll, forced) {\n    if (LOGGING > 4) console.log(\"%c[Multiply] [Debug] Function multiply begin\", 'color:grey');\n    var d = new Date();\n    var h = d.getHours();\n    var t = missingTime();\n    var max_missing_min = 0;\n    var milli_between_multiplies = Math.floor(MULTIPLY_WAIT_HOURS*60*60*1000);\n    var balance = parseFloat($('#balance').text()).toFixed(8);\n    var bonus_mul = false;\n    var last_multiply_diff = Math.floor(d.getTime() - last_multiply);\n \n    if (LOGGING > 4) console.log(\"%c[Multiply] [Debug] lastMultiply diff: \"+last_multiply_diff+\" -- last_multiply: \"+last_multiply+\" -- now: \"+d.getTime(), 'color:grey');\n \n    if ($(\"#bonus_account_table\").length != 0) {\n        var bonus_mul_balance = $('#bonus_account_balance').text().split(\" \")[0];\n        var bonus_mul_wager_remaining = $('#bonus_account_wager').text().split(\" \")[0];\n        if (LOGGING > 2) console.log('%c[Multiply] bonus balance: '+bonus_mul_balance+', wager remaining: '+bonus_mul_wager_remaining, 'color:grey');\n        bonus_mul = true;\n    } else bonus_mul = false;\n \n    if (!Boolean(MULTIPLY) && !Boolean(forced)) {\n        if (LOGGING > 3) console.log('[Multiply] Not playing multiply. Disabled by config');\n        $('#script_output_title_multiply_wait_hours').text('Disabled').removeClass('true').addClass('false');\n        $('#multiply_strategy').hide();\n        return false;\n    }\n    if ( !Boolean(MULTIPLY_AT_NIGHT) && isNight() && !Boolean(forced)) {\n        if (LOGGING > 3) console.log('%c[Multiply] Not playing multiply in the night','color:gray');\n        $('#script_output_title_multiply_wait_hours').text('Wait Morning');\n        return false;\n    }\n    if ( balance < MAX_BET && bonus_mul_balance < MAX_BET && !Boolean(forced)) {\n        if (LOGGING > 3) console.log('[Multiply] Not enough balance for MAX_BET');\n        $('#script_output_title_multiply_wait_hours').text('Adjust MaxBet');\n        return false;\n    }\n    if ( last_multiply_diff < milli_between_multiplies && !Boolean(forced)) {\n        var min_between_mult=Math.floor((milli_between_multiplies - last_multiply_diff)/1000/60);\n        var hours_between_mult=Math.floor(min_between_mult/60);\n        if (LOGGING > 3) console.log('[Multiply]  Not playing multiply. Wait MULTIPLY_WAIT_HOURS before play again, missing '+hours_between_mult+\"h \"+min_between_mult%60+\"m\");\n        $('#script_output_title_multiply_wait_hours').text('Wait '+hours_between_mult+\"h \"+min_between_mult%60+\"m\");\n        //$('#ref_multiply_missing_hours').text(Math.ceil((milli_between_multiplies - last_multiply_diff)/1000/60/60));\n        $('#script_output_title_multiply_wait_hours').removeClass('true').addClass('false');\n        return false;\n    }\n    if ( t[0] > 0 && t[0] <= max_missing_min && !Boolean(forced)) {\n        if (LOGGING > 3) console.log('[Multiply] Not playing multiply. Wait to play not near next roll, missing just %c'+t[0]+' min', 'color:purple');\n        $('#script_output_title_multiply_wait_hours').text('Wait '+t[0]+'m');\n        return false;\n    }\n    if (Boolean(isMultiplyRunning)) {\n        if (LOGGING > 3) console.log('[Multiply] Not playing multiply. Some other istance already playing');\n        return false;\n    }\n    if (Boolean(after_roll)) {\n        if (!Boolean(forced)) $('.double_your_btc_link').not('.hide_menu').click();\n \n        tot_multiply_games = parseInt(tot_multiply_games)+1;\n        setCookie(\"tot_multiply_games\", tot_multiply_games, 30);\n        setCookie(\"last_multiply\", d.getTime(), 30);\n        $('#script_output_multiply_status').html('<span class=\"bold\">Multiply: <span class=\"true\">Running!</span></span>');\n        if (LOGGING > 4) console.log(Boolean(after_roll)+\", \"+balance+\", \"+bonus_mul_balance+\", \"+MAX_BET+\", \"+Boolean(MULTIPLY));\n \n        multiply_manual();\n    } else {\n        isMultiplyPlayable = true;\n        if (LOGGING > 3) console.log('[Multiply] Yes can play multiply '+isMultiplyPlayable);\n    }\n}\n \nfunction multiply_manual() {\n    var bet_count=0; var bet_remaining=0;\n    var past_bet; var bet_amount; var bet_odds; var bet_hilo;\n    var winnings=0;\n    var won=0;  // won lost or error -1, 1 or 0\n    var consecutive_lost=0; var consecutive_win=0;\n \n    var fast_bet=false; var log_msg = \"\"; var c;\n    var multiply_message=\"\";\n    var curr_multiply_balance=0; var curr_multiply_wagered = 0;\n \n    var max_consecutive_losts_session=0; var max_consecutive_wins_session=0;\n    var max_consecutive_losts_inplay_session=0; var max_bet_session=0;\n    var last_session_hist=[];\n \n    var balance = parseFloat($('#balance').text()).toFixed(8);\n \n    // Global vars setting to avoid duplicate games and increments.\n    // as error reported bug on play\n    game2_consecutive_lost_passed=false; game2_finished_loosing=false;\n    game2_play_after_losses=0; game2_step=0;\n    forceMultiplyStopHard=false; forceMultiplyStopSoft=false;\n    game_play_began=false; game_play_count=0;\n \n    // Multilpy Running\n    isMultiplyRunning = true;\n    if ( $('#multiply_full_container').length) {\n        multiply_message = \"<span class='lime'><b>Running!</b></span>\";\n        $('#multiply_message').html(multiply_message);\n    }\n    // Activate DOM Monitors\n \n    /// *** NEW VERSION ***\n    if (LOGGING > 4) console.log(\"[Multiply] Activating MutationObserver Monitors, beginning to play\");\n    const targetNode = document.getElementById('double_your_btc_result');\n    const config = { attributes: true, childList: true, subtree: true };\n    const callback = function(mutationsList, observer) {\n        //if (LOGGING > 4) console.log(\"%cDom modified.\", \"color: grey\");\n        if ( $('#double_your_btc_error').html().length > 0 ) {\n            var multiply_error = $('#double_your_btc_error').html();\n            console.log('%c[Multiply] Fatal Error in multiply: '+multiply_error, 'color: red');\n            //$('#script_output_title_multiply_wait_hours').text('Fatal Error').removeClass(true).addClass('false');\n            setCookie('multiply_error', multiply_error, 31);\n            multiply_message = \"Finish for some error\";\n            if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n            multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n            return true;\n        } else if ( $(\"#double_your_btc_bet_win\").html().length > 0 ) {\n            won = 1; c=\"green\"; fast_bet = true;\n            winnings = $(\"#double_your_btc_bet_win\").html().split(\" \")[6];\n            if (winnings > 0) {\n                tot_multiply_balance = parseFloat(parseFloat(tot_multiply_balance) + parseFloat(winnings)).toFixed(8);\n                curr_multiply_balance = parseFloat(parseFloat(curr_multiply_balance) + parseFloat(winnings)).toFixed(8);\n            }\n            consecutive_win++;\n            consecutive_lost=0;\n            if ( $('#multiply_full_container').length) {\n                $('#multiply_cons_wins > b').html(consecutive_win).addClass(\"green-bg\");\n                setTimeout(function () { $(\"#multiply_cons_wins > b\").removeClass(\"green-bg\"); },500);\n            }\n        } else if ($(\"#double_your_btc_bet_lose\").html().length > 0 ) {\n            won = -1; c = \"red\";\n            winnings = $(\"#double_your_btc_bet_lose\").html().split(\" \")[6];\n            if (winnings > 0) {\n                tot_multiply_balance = parseFloat(parseFloat(tot_multiply_balance) - parseFloat(winnings)).toFixed(8);\n                curr_multiply_balance = parseFloat(parseFloat(curr_multiply_balance) - parseFloat(winnings)).toFixed(8);\n            }\n            consecutive_lost++;\n            consecutive_win=0;\n            if ( $('#multiply_full_container').length) {\n                $('#multiply_cons_losts > b').html(consecutive_lost).addClass(\"red-bg\");\n                setTimeout(function () { $(\"#multiply_cons_losts > b\").removeClass(\"red-bg\"); },500);\n            }\n        } else won = 0;\n \n        if (won != 0) {\n            // COOKIES for STATISTICS\n            setCookie(\"tot_multiply_balance\", tot_multiply_balance, 7);\n            setCookie('curr_multiply_balance',curr_multiply_balance,7);\n            var rolled = $('#previous_roll').text();\n \n            last_session_hist.push(Math.round(curr_multiply_balance*100000000));\n            setCookie('last_multiply_session_hist',JSON.stringify(last_session_hist),7)\n \n            // Session Cookie\n            if (consecutive_lost >= max_consecutive_losts_session) {\n                max_consecutive_losts_session=consecutive_lost;\n                setCookie('max_consecutive_losts_session', max_consecutive_losts_session, 7);\n            }\n            if (consecutive_lost >= max_consecutive_losts_inplay_session && bet_amount > MIN_BET) {\n                max_consecutive_losts_inplay_session=consecutive_lost;\n                setCookie('max_consecutive_losts_inplay_session',max_consecutive_losts_inplay_session,7);\n            }\n            if (bet_amount >= max_bet_session) {\n                max_bet_session=parseFloat(bet_amount).toFixed(8);\n                setCookie('max_bet_session',max_bet_session,7);\n            }\n \n            // General Cookies\n            if (consecutive_lost > max_consecutive_losts_inplay && bet_amount > MIN_BET) {\n                max_consecutive_losts_inplay = consecutive_lost;\n                setCookie('max_consecutive_losts_inplay',max_consecutive_losts_inplay,7);\n            }\n            if (consecutive_lost > max_consecutive_losts) {\n                max_consecutive_losts=consecutive_lost;\n                setCookie('max_consecutive_losts', consecutive_lost, 365);\n            }\n \n            if ( rolled != '7777' ){\n                jackpot_distance++;\n                setCookie('jackpot_distance', jackpot_distance, 31);\n            }\n \n            if ( $('#multiply_full_container').length) {\n                // Update the values\n                $('#multiply_bet_count > b').html(bet_count).addClass(\"green-bg\");\n                setTimeout(function () { $(\"#multiply_bet_count > b\").removeClass(\"green-bg\"); },200);\n                $('#multiply_play_count > b').html(game_play_count);\n                $('#multiply_max_cons_losts > b').html(max_consecutive_losts_session);\n                $('#multiply_max_bet > b').html(max_bet_session);\n                $('#balance_before > b').html(balance);\n                $('#balance_now > b').html(parseFloat($('#balance').text()).toFixed(8));\n                $('#multiply_wagered > b').html(curr_multiply_wagered);\n                $('#multiply_profit > b').html(curr_multiply_balance);\n            }\n \n            // Next bet values getting It return a FLOAT number. Will be converted in bet function.\n            bet_amount = get_bet_amount( past_bet, consecutive_lost, consecutive_win);\n            bet_hilo = get_bet_hilo(consecutive_lost);\n            bet_odds = get_bet_odds();\n \n            if (LOGGING > 2) {\n                log_msg =  \"Rolled:\"+rolled+\",%c Won:\"+parseFloat(winnings).toFixed(8)+\"%c, Played#:\"+bet_count;\n                log_msg += \"/\"+MAX_ROLLS_AT_MULTIPLY+\"/\"+game_play_count+\", L/W: \"+consecutive_lost+\"/\"+consecutive_win;\n                log_msg += \", CurrBal:\"+curr_multiply_balance+\", TotBal:\"+tot_multiply_balance;\n                log_msg += \" <Next bet: \"+parseFloat(bet_amount).toFixed(8)+\"(\"+game2_step+\") on \"+bet_hilo+\", Fast: \"+fast_bet+\">\";\n                console.log(log_msg, css_bold+\"color:\"+c, css_reset);\n            }\n \n            // EXIT CONDITIONS -- Play or finished logic\n            if (Boolean(forceMultiplyStopHard)) {\n                multiply_message = \"Finish for <b>Stop Button</b> pressed\";\n                if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                return true;\n            } else if ( bet_count >= MAX_ROLLS_AT_MULTIPLY || Boolean(forceMultiplyStopSoft)) {\n                if (LOGGING > 2) console.log(\"%cSoft finish, wait ending this play\", css_bold+\"color:\"+c+\", \"+css_reset);\n                if ( !Boolean(game_play_began) ) {\n                    multiply_message = \"Finish for <b>Stop Soft</b> or <b>Max Roll</b> passed\";\n                    if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                    multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                    return true;\n                }\n            } else if (game_play_count >= MAX_PLAY && !Boolean(game_play_began)) {\n                multiply_message = \"Finish for <b>Game Play</b> count passed\";\n                if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                return true;\n            } else if (bet_amount > MAX_BET) {\n                multiply_message = \"Finish for <b>bet amount</b> passed max bet\";\n                if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                return true;\n            } else if (curr_multiply_balance >= MAX_WIN) {\n                multiply_message = \"Finish for <b>MAX_WIN</b> passed\";\n                if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                return true;\n            } else if (bet_amount < 0.00000001) {\n                multiply_message = \"Finish for error in bet amount value\";\n                if (LOGGING > 2) console.log(\"%c\"+multiply_message, css_bold+\"color:\"+c);\n                multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n                return false;\n            }\n \n            curr_multiply_wagered = parseFloat(parseFloat(curr_multiply_wagered) + parseFloat(bet_amount)).toFixed(8);\n            tot_multiply_wagered = parseFloat(parseFloat(tot_multiply_wagered) + parseFloat(bet_amount)).toFixed(8);\n            setCookie('tot_multiply_wagered',tot_multiply_wagered, 365);\n            setCookie('curr_multiply_wagered',curr_multiply_wagered, 30);\n \n            if (past_bet != bet_amount) fast_bet=false;\n            else fast_bet=true;\n \n            bet_count++;\n            past_bet=bet_amount;\n \n            //Security wait of 30 seconds if speed fast (3) and every 500 collected\n \n            // call the bet\n            bet(bet_amount, bet_hilo, bet_odds, fast_bet);\n        } else {\n            var winlength=$(\"#double_your_btc_bet_win\").html().length;\n            var loslength=$(\"#double_your_btc_bet_lose\").html().length;\n            var domtree=$('#double_your_btc_result').html();\n            multiply_message = \"Finish for no value in DOM var\";\n            if (LOGGING > 1) console.log(\"%cFinish for no value in won var, was: \"+won+\", win l: \"+winlength+\", los l: \"+loslength, css_bold+\"color:\"+c);\n            if (LOGGING > 3) console.log(\"%cFinish for no value in won var, DOM was: \"+domtree, css_bold+\"color: grey\");\n \n            multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message);\n        }\n    };\n    // Begin the observer\n    const observer = new MutationObserver(callback);\n    observer.observe(targetNode, config);\n \n    // Disable Animation\n    $(\"#disable_animation_checkbox\").prop( \"checked\", true );\n    // First bet that cause all the others and Dom modifications\n    setTimeout(function(){\n        bet_hilo = get_bet_hilo(0);\n        bet_amount = get_bet_amount(MIN_BET,0,0);\n        bet_odds = get_bet_odds();\n        bet_count++; past_bet=bet_amount;\n        bet(bet_amount, bet_hilo, bet_odds, false);\n    }, random (3500,6500) );\n}\n \nfunction get_bet_amount(past_bet, consecutive_lost, consecutive_win){\n    if (STRATEGY == 0) {\n        if (consecutive_lost == 0) {\n            game_play_began=false;\n            return BAS_BET;\n        }\n        else {\n            if (consecutive_lost == 1) {\n                game_play_began = true;\n                game_play_count++;\n                tot_multiply_play++;\n                setCookie('tot_multiply_play', tot_multiply_play, 7);\n            }\n            return past_bet*2;\n        }\n    } else if (STRATEGY == 1 || WAIT_PLAY_AFTER_LOSSES == 0){\n        if (consecutive_lost < MIN_LOSSES_BEFORE_PLAY) {\n            if (Boolean(game_play_began)) {\n                game_play_began=false;\n            }\n            return MIN_BET;\n        } else if (consecutive_lost == MIN_LOSSES_BEFORE_PLAY){\n            game_play_began=true;\n            tot_multiply_play++;\n            game_play_count++;\n            setCookie('tot_multiply_play', tot_multiply_play, 7);\n            return BAS_BET;\n        } else {\n            return past_bet+(past_bet*INCR/100);\n        }\n    } else if (STRATEGY == 2 || STRATEGY == 3) {\n        if (!Boolean(game2_consecutive_lost_passed)) {\n            if (Boolean(game_play_began)) game_play_began=false;\n            if (consecutive_lost < MIN_LOSSES_BEFORE_PLAY) {\n                game2_step=1;\n                return MIN_BET;\n            } else if (consecutive_lost == MIN_LOSSES_BEFORE_PLAY){\n                // passed tot lost, next step -> else\n                game2_step=2;\n                game2_consecutive_lost_passed = true;\n                return MIN_BET;\n            } else return \"-009\";\n        } else {\n            if (!Boolean(game2_finished_loosing)) {\n                if (consecutive_win == 0 ) {\n                    game2_step=3;\n                    return MIN_BET;\n                } else {\n                    //finished loosing, first win, next step -> else\n                    game2_step=4;\n                    game2_finished_loosing=true;\n                    game2_play_after_losses++;\n                    return get_bet_amount(MIN_BET,consecutive_lost,consecutive_win);\n                }\n            } else {\n                if (!Boolean(game_play_began)){\n                    if (game2_play_after_losses < WAIT_PLAY_AFTER_LOSSES) {\n                        game2_step=5;\n                        game2_play_after_losses++;\n                        return MIN_BET;\n                    } else if (game2_play_after_losses >= WAIT_PLAY_AFTER_LOSSES){\n                        // Begin to play, next step -> else\n                        game2_step=6;\n                        game_play_began=true;\n                        tot_multiply_play++;\n                        game_play_count++;\n                        setCookie('tot_multiply_play', tot_multiply_play, 7);\n                        return BAS_BET;\n                    } else return \"-008\";\n                } else {\n                    if (consecutive_lost > 0) {\n                        game2_step=7;\n                        return past_bet+(past_bet*INCR/100);\n                    } else {\n                        // Playing and won, go back to the begin\n                        game_play_began=false;\n                        game2_step=0;\n                        game2_consecutive_lost_passed=false;\n                        game2_finished_loosing=false;\n                        game2_play_after_losses=0;\n \n                        if (STRATEGY == 3) {\n                            MIN_LOSSES_BEFORE_PLAY++;\n                            if (LOGGING > 2) console.log(\"New MIN_LOSSES_BEFORE_PLAY value is: \"+MIN_LOSSES_BEFORE_PLAY);\n                        }\n                        return MIN_BET;\n                    }\n                }\n            }\n        }\n    } else return \"-010\";\n}\n \nfunction get_bet_odds () {\n    if (STRATEGY == 0) { return 2; }\n    else return ODDS;\n}\n \nfunction get_bet_hilo (index) {\n    if (HIGH_LOW == 3 ) {\n        var olaer = ['H','L','L','H','H','H','L','L','L','L','H','H','H','H','H','L','L','L','L','L','L','H','H','H','H','H','H','H','L','L','L','L','L','L','L','L'];\n        var key = index % olaer.length;\n        return olaer[key];\n    } else if (HIGH_LOW == 1) {\n        return \"H\";\n    } else if (HIGH_LOW == 2) {\n        return \"L\";\n    } else {\n        var r = random(1,10);\n        if (r<5) return 'H';\n        else return 'L';\n    }\n}\n \nfunction bet(amount, hl, odds, fast) {\n    var toclick; var wait_time_1=0; var wait_time_2=0;\n    if (hl == \"L\") toclick = \"#double_your_btc_bet_lo_button\";\n    else toclick = \"#double_your_btc_bet_hi_button\";\n    //if (LOGGING > 4) console.log(\">> playing: \"+hl+\", betting: \"+amount.toFixed(8) );\n    tot_multiply_bets++;\n    setCookie('tot_multiply_bets', tot_multiply_bets, 7);\n \n    if (SPEED == 0) {\n        wait_time_1 = random(2000,10000); wait_time_2=random(1000,5000);\n    } else if (SPEED == 1) {\n        if (Boolean(fast)) { wait_time_1 = random(300,900); wait_time_2=random(100,200); }\n        else { wait_time_1 = random(1133,5544); wait_time_2=random(100,1000); }\n    } else if (SPEED == 2) {\n        wait_time_1 = random(300,1000); wait_time_2=random(100,200);\n    } else {\n        wait_time_1 = random(10,20); wait_time_2=0;\n    }\n \n    setTimeout (function(){\n        $(\"#double_your_btc_stake\").val(parseFloat(amount).toFixed(8));\n        $(\"#double_your_btc_payout_multiplier\").val(odds);\n        setTimeout(function(){ $(toclick).click(); }, wait_time_1 );\n    }, wait_time_2 );\n}\n \nfunction multiplyEndGame(bet_amount, bet_count, consecutive_lost, curr_multiply_balance, observer, multiply_message) {\n    // Finished playing multiply\n    // Deactivate DOM Monitors\n    observer.disconnect();\n \n    if ( $('#multiply_full_container').length) {\n        $('#multiply_message').html(multiply_message);\n    }\n \n    multiply_hist_arr.push(tot_multiply_balance);\n    setCookie('multiply_hist_arr',JSON.stringify(multiply_hist_arr),14);\n    console.log(\"%cMultiply hist array: \"+multiply_hist_arr, 'color:grey');\n    if (LOGGING > 2) {\n        if (bet_amount > MAX_BET) {\n            console.log(\"%c Max Bet limit passed. Max Bet: \"+MAX_BET+\", Next Bet: \"+bet_amount, 'color: red');\n        } else if (bet_count >= MAX_ROLLS_AT_MULTIPLY ) {\n            console.log(\"%c Max Rolls limit passed. Max Rolls: \"+MAX_ROLLS_AT_MULTIPLY+\", Tot Rolls: \"+bet_count+\" with \"+consecutive_lost+\" cons losts\", 'color: red');\n        } else if (game_play_count >= MAX_PLAY) {\n            console.log(\"%c Max Plays limit passed. Max Plays: \"+MAX_PLAY+\", Tot Plays: \"+game_play_count, 'color: red');\n        }\n    }\n    if (LOGGING > 4) console.log(\"%c Disabling Monitors, finished multiply\", css_bold+'color:green');\n    if (LOGGING > 4) console.log(\"%c Tot Balance: \"+tot_multiply_balance+\", Tot games: \"+tot_multiply_games+\", Tot bets: \"+tot_multiply_bets, css_bold+'color: green');\n    if (LOGGING > 4) console.log(\"%c Session Balance: \"+curr_multiply_balance+\", Session tot bets: \"+bet_count, css_bold+'color:green');\n    $('#script_output_multiply_status').html('<span class=\"bold\">Multiply: <span class=\"true\">Done!</span></span>');\n    isMultiplyRunning=false;\n    setTimeout(function(){\n        isMultiplyRunning = false;\n        $('.free_play_link').not('.hide_menu').click();\n    }, random(3000,30000));\n}\n \nfunction missingTime () {\n    var min = 0; var sec = 0; var str = \"\";\n    str = $('title').text().split(\" \")[0];\n    //if (LOGGING > 4) console.log(\"%c[missingTime] [Debug] string: \"+str, 'color: grey');\n    if (str.length <= 7 && str.length >= 3) {\n        min = str.split(':')[0]; if (min.length > 0) min = min.replace('m','');\n        sec = str.split(':')[1]; if (sec.length > 0) sec = sec.replace('s','');\n    } else if ( $('#free_play_form_button').is(':visible') ) {\n        min = 0; sec = 0;\n    } else { min = -1; sec = -1; }\n    return [min,sec];\n}\n \nfunction isNight(){\n    var d = new Date();\n    var h = d.getHours();\n \n    if ( stopNight > startNight && h >= startNight && h <= stopNight)  {\n        // console.log(h+\" -- \"+stopNight)\n        return true;\n    } else if  (stopNight < startNight && h >= startNight || h <= stopNight ) {\n        return true;\n    }\n    else return false;\n}\n \nfunction random(min,max){\n   return min + (max - min) * Math.random();\n}\n \nfunction closePopupInterval (target) {\n    //if (LOGGING > 4) console.log(\"%c[Debug] Function closePopupInterval begin\", 'color:grey');\n    if (target.is(':visible')) {\n        setTimeout(function(){\n            if (LOGGING > 3) console.log(\"%cClose ADS\", 'color: grey');\n            target.click();\n            ads_closed ++;\n            $('#script_output_title_ads_closed_num').text(ads_closed);\n        }, random (500,120000));\n    } else {\n        //if (LOGGING > 4) console.log(\"%cNot visible: \"+target.attr('id')+\" \"+target.attr('class'), 'color: grey');\n    }\n}\nfunction closeRandomPopupInterval (target, randomness) {\n    //if (LOGGING > 4) console.log(\"%c[Debug] Function closeRandomPopupInterval begin\", 'color:grey');\n    var rand = random(1,100);\n    if (rand < randomness && target.is(':visible')) {\n        setTimeout(function(){\n            if (LOGGING > 3) console.log(\"%cClose Random ADS\", 'color: grey');\n            target.click();\n            ads_closed ++;\n            $('#script_output_title_ads_closed_num').text(ads_closed);\n        }, random (500,120000));\n    } else {\n        //if (LOGGING > 4) console.log(\"%cNot visible: \"+target.attr('id')+\" \"+target.attr('class'), 'color: grey');\n    }\n}\n \n \nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n \nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + (exdays*24*60*60*1000));\n  var expires = \"expires=\"+ d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n \nfunction reset_all_stats(){\n    if (LOGGING > 2) console.log(\"%c Resettnig all stats deleting all cookies\", 'color:red');\n    setCookie(\"last_bonus\",0,365); setCookie(\"last_multiply\",0,30); setCookie(\"rp_hist_arr\",\"[]\",31); setCookie(\"tot_multiply_balance\",0,7); setCookie(\"tot_multiply_games\",0,30);\n    setCookie(\"tot_rp_spent_captcha\",0,7); setCookie(\"tot_rp_spent_rewards\",0,7); setCookie('curr_multiply_balance',0,7); setCookie('curr_multiply_wagered',0,30);\n    setCookie('executions',0,7); setCookie('last_multiply_session_hist',0,7); setCookie('max_bet_session',0,7); setCookie('max_consecutive_losts',0,365);\n    setCookie('max_consecutive_losts_inplay',0,7); setCookie('max_consecutive_losts_inplay_session',0,7); setCookie('max_consecutive_losts_session',0,7);\n    setCookie('multiply_error',0,31); setCookie('multiply_hist_arr',\"[]\",14); setCookie('tot_btc_winning_rolling',0,7); setCookie('tot_lottery_tickets',0,7);\n    setCookie('tot_lottery_winning_rolling',0,7); setCookie('tot_multiply_balance',0,7); setCookie('tot_multiply_bets',0,7); setCookie('tot_multiply_play',0,7);\n    setCookie('tot_multiply_wagered',0,365); setCookie('tot_rp_winning_rolling',0,7);\n    location.reload();\n}\n \nfunction showStatus(){\n    if (LOGGING > 4) console.log(\"%c[Debug] Function showStatus begin\", 'color:grey');\n    var t=missingTime();\n    var date = new Date();\n    var script_output_msg_1 = \"\";\n    var script_output_msg_2 = \"\";\n    var [{ value: month },,{ value: day },,{ value: year },,{ value: hour },,{ value: minute }] = dateTimeFormat.formatToParts(date);\n \n    var ca='red'; var cb='red'; var cc='red'; var css='font-weight: bold; color:';\n    var c1='purple'; var c2='olive';\n    var c3='brown'; var c4='teal';\n    if (LOGGING > 0) console.log(\">>>>>>>>>>%c Status:%c [\"+hour+\":\"+minute+\"]\", css_bold+'color:'+c1, css_bold);\n    //Rewards and multiply infos and colors\n    if (Boolean(BONUS_WOF)) ca = 'green'; if (Boolean(MULTIPLY)) cb='green'; if (Boolean(LOTTERY)) cc='green';\n    var cssa='font-weight: bold; color:'+ca;\n    var cssb='font-weight: bold; color:'+cb;\n    var cssc='font-weight: bold; color:'+cc;\n    if (LOGGING > 0) console.log(\">>>>>>>>>> Buying Rewards: \"+\"%c\"+Boolean(BONUS_WOF)+\"\"+\"%c; Playing Multiply: \"+\"%c\"+Boolean(MULTIPLY)+\"\"+\"%c; Buying Lottery: \"+\"%c\"+Boolean(LOTTERY), cssa, css_reset,cssb, css_reset, cssc);\n    if (t[0] > 0 || t[1] > 0) {\n        if (LOGGING > 0) console.log(\">>>>>>>>>> Missing \"+\"%c\"+t[0]+\" min \"+t[1]+\" sec\"+\"%c for next roll\",css_bold+\"color:\"+c1,css_reset);\n    }\n \n    if (LOGGING > 0) console.log(\">>>>>>>>>> BTC won with script: \"+\"%c\"+tot_btc_winning_rolling, css_bold+'color:'+c4);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> Tickets won with script: \"+\"%c\"+tot_lottery_winning_rolling, css_bold+'color:'+c4);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> RP won with script: \"+\"%c\"+tot_rp_winning_rolling, css_bold+'color:'+c4);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> RP Spent with rewards: \"+\"%c\"+tot_rp_spent_rewards, css_bold+'color:'+c1);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> RP Spent with captcha: \"+\"%c\"+tot_rp_spent_captcha, css_bold+'color:'+c1);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> Multiply Balance: \"+\"%c\"+tot_multiply_balance, css_bold+'color:'+c3);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> Multiply Games played: \"+\"%c\"+tot_multiply_games, css_bold+'color:'+c3);\n    if (LOGGING > 0) console.log(\">>>>>>>>>> Multiply Wagered: \"+\"%c\"+tot_multiply_wagered, css_bold+'color:'+c3);\n \n    // Update Status Message OnPage\n    script_output_msg_1 =  \"<span class='bold'>Config: </span>\";\n    script_output_msg_1 += \"<span class='\"+Boolean(BONUS_WOF)+\"'>WOF BONUS </span> <> \";\n    script_output_msg_1 += \"<span class='\"+Boolean(BONUS1000)+\"'>BONUS1000</span> <> \";\n    script_output_msg_1 += \"<span class='\"+Boolean(MULTIPLY)+\"'>MULTIPLY</span> <> \";\n    script_output_msg_1 += \"<span class='\"+Boolean(LOTTERY)+\"'>LOTTERY</span>\";\n    $('#script_output_msg_1').html(script_output_msg_1);\n \n    script_output_msg_2 = \"<span class='bold'> Script Winnings:  </span> \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_btc_winning_rolling+\"</span> btc; \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_lottery_winning_rolling+\"</span> tickets; \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_rp_winning_rolling+\"</span> RP.\";\n    script_output_msg_2 += \"</br>\";\n    script_output_msg_2 += \"<span class='bold'> Script Spent: </span>\";\n    script_output_msg_2 += \"<span class='true'>\"+tot_lottery_tickets+\"</span> in lottery tickets; \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_rp_spent_rewards+\"</span> RP in bonus; \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_rp_spent_captcha+\"</span> RP in captcha. \";\n    script_output_msg_2 += \"</br>\";\n    script_output_msg_2 += \"<span class='bold'> Script Multiply Balance: </span>\";\n    script_output_msg_2 += \"<span class='true'>\"+tot_multiply_balance+\"</span> btc in \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_multiply_games+\"</span> games and \";\n    script_output_msg_2 += \"<span class='true'>\"+tot_multiply_bets+\"</span> bets\";\n    $('#script_output_msg_2').html(script_output_msg_2);\n \n \n}\n \nfunction setBtcPrice(){\n    //if (LOGGING > 4) console.log(\"%c[Debug] Function setBtcPrice begin\", 'color:grey');\n    var btc_price=$('#btc_usd_price').html().split('.')[0].replace('$','').replace(',','');\n    var i=1;\n    var to=2000;\n    if (i>=10) return false;\n    else if (isNaN(btc_price)) {\n        if (LOGGING > 4) console.log(\"%c[setBtcPrice] Price NA, try again in \"+to*i/1000+\" s\", 'color:grey');\n        setTimeout(function(){ setBtcPrice(); }, to*i );\n        i++;\n        return true;\n    } else {\n        $('#usdxbtc').html(btc_price);\n        var usd_price=parseFloat(100000000/btc_price).toFixed(0);\n        $('#satxusd').html(usd_price);\n    }\n}","libs":[],"name":"FaucetSolver","options":{"altCSS":false,"altJS":false,"autoImportant":false,"on":true}}]}